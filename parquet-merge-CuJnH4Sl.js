(function(){"use strict";try{if(typeof document<"u"){var e=document.createElement("style");e.appendChild(document.createTextNode(`@layer properties{@supports (((-webkit-hyphens:none)) and (not (margin-trim:inline))) or ((-moz-orient:inline) and (not (color:rgb(from red r g b)))){*,:before,:after,::backdrop{--tw-font-weight:initial;--tw-shadow:0 0 #0000;--tw-shadow-color:initial;--tw-shadow-alpha:100%;--tw-inset-shadow:0 0 #0000;--tw-inset-shadow-color:initial;--tw-inset-shadow-alpha:100%;--tw-ring-color:initial;--tw-ring-shadow:0 0 #0000;--tw-inset-ring-color:initial;--tw-inset-ring-shadow:0 0 #0000;--tw-ring-inset:initial;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-offset-shadow:0 0 #0000;--tw-border-style:solid}}}@layer theme{:root,:host{--font-sans:ui-sans-serif,system-ui,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol","Noto Color Emoji";--font-mono:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace;--color-blue-500:oklch(62.3% .214 259.815);--color-blue-700:oklch(48.8% .243 264.376);--color-indigo-200:oklch(87% .065 274.039);--color-indigo-300:oklch(78.5% .115 274.713);--color-gray-300:oklch(87.2% .01 258.338);--color-gray-500:oklch(55.1% .027 264.364);--color-gray-900:oklch(21% .034 264.665);--color-white:#fff;--spacing:.25rem;--text-sm:.875rem;--text-sm--line-height:calc(1.25/.875);--font-weight-medium:500;--font-weight-semibold:600;--radius-md:.375rem;--default-font-family:var(--font-sans);--default-mono-font-family:var(--font-mono)}}@layer base{*,:after,:before,::backdrop{box-sizing:border-box;border:0 solid;margin:0;padding:0}::file-selector-button{box-sizing:border-box;border:0 solid;margin:0;padding:0}html,:host{-webkit-text-size-adjust:100%;-moz-tab-size:4;tab-size:4;line-height:1.5;font-family:var(--default-font-family,ui-sans-serif,system-ui,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol","Noto Color Emoji");font-feature-settings:var(--default-font-feature-settings,normal);font-variation-settings:var(--default-font-variation-settings,normal);-webkit-tap-highlight-color:transparent}hr{height:0;color:inherit;border-top-width:1px}abbr:where([title]){-webkit-text-decoration:underline dotted;text-decoration:underline dotted}h1,h2,h3,h4,h5,h6{font-size:inherit;font-weight:inherit}a{color:inherit;-webkit-text-decoration:inherit;text-decoration:inherit}b,strong{font-weight:bolder}code,kbd,samp,pre{font-family:var(--default-mono-font-family,ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace);font-feature-settings:var(--default-mono-font-feature-settings,normal);font-variation-settings:var(--default-mono-font-variation-settings,normal);font-size:1em}small{font-size:80%}sub,sup{vertical-align:baseline;font-size:75%;line-height:0;position:relative}sub{bottom:-.25em}sup{top:-.5em}table{text-indent:0;border-color:inherit;border-collapse:collapse}:-moz-focusring{outline:auto}progress{vertical-align:baseline}summary{display:list-item}ol,ul,menu{list-style:none}img,svg,video,canvas,audio,iframe,embed,object{vertical-align:middle;display:block}img,video{max-width:100%;height:auto}button,input,select,optgroup,textarea{font:inherit;font-feature-settings:inherit;font-variation-settings:inherit;letter-spacing:inherit;color:inherit;opacity:1;background-color:#0000;border-radius:0}::file-selector-button{font:inherit;font-feature-settings:inherit;font-variation-settings:inherit;letter-spacing:inherit;color:inherit;opacity:1;background-color:#0000;border-radius:0}:where(select:is([multiple],[size])) optgroup{font-weight:bolder}:where(select:is([multiple],[size])) optgroup option{padding-inline-start:20px}::file-selector-button{margin-inline-end:4px}::placeholder{opacity:1}@supports (not ((-webkit-appearance:-apple-pay-button))) or (contain-intrinsic-size:1px){::placeholder{color:currentColor}@supports (color:color-mix(in lab,red,red)){::placeholder{color:color-mix(in oklab,currentcolor 50%,transparent)}}}textarea{resize:vertical}::-webkit-search-decoration{-webkit-appearance:none}::-webkit-date-and-time-value{min-height:1lh;text-align:inherit}::-webkit-datetime-edit{padding-block:0}::-webkit-datetime-edit-year-field{padding-block:0}::-webkit-datetime-edit-month-field{padding-block:0}::-webkit-datetime-edit-day-field{padding-block:0}::-webkit-datetime-edit-hour-field{padding-block:0}::-webkit-datetime-edit-minute-field{padding-block:0}::-webkit-datetime-edit-second-field{padding-block:0}::-webkit-datetime-edit-millisecond-field{padding-block:0}::-webkit-datetime-edit-meridiem-field{padding-block:0}:-moz-ui-invalid{box-shadow:none}button,input:where([type=button],[type=reset],[type=submit]){-webkit-appearance:button;-moz-appearance:button;appearance:button}::file-selector-button{-webkit-appearance:button;-moz-appearance:button;appearance:button}::-webkit-inner-spin-button{height:auto}::-webkit-outer-spin-button{height:auto}[hidden]:where(:not([hidden=until-found])){display:none!important}[type=text],input:where(:not([type])),[type=email],[type=url],[type=password],[type=number],[type=date],[type=datetime-local],[type=month],[type=search],[type=tel],[type=time],[type=week],[multiple],textarea,select{-webkit-appearance:none;-moz-appearance:none;appearance:none;--tw-shadow:0 0 #0000;background-color:#fff;border-width:1px;border-color:#6a7282;border-radius:0;padding:.5rem .75rem;font-size:1rem;line-height:1.5rem}:is([type=text],input:where(:not([type])),[type=email],[type=url],[type=password],[type=number],[type=date],[type=datetime-local],[type=month],[type=search],[type=tel],[type=time],[type=week],[multiple],textarea,select):focus{outline-offset:2px;--tw-ring-inset:var(--tw-empty, );--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:oklch(54.6% .245 262.881);--tw-ring-offset-shadow:var(--tw-ring-inset)0 0 0 var(--tw-ring-offset-width)var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset)0 0 0 calc(1px + var(--tw-ring-offset-width))var(--tw-ring-color);box-shadow:var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow);border-color:#155dfc;outline:2px solid #0000}input::placeholder,textarea::placeholder{color:#6a7282;opacity:1}::-webkit-datetime-edit-fields-wrapper{padding:0}::-webkit-date-and-time-value{min-height:1.5em}::-webkit-date-and-time-value{text-align:inherit}::-webkit-datetime-edit{display:inline-flex}::-webkit-datetime-edit{padding-top:0;padding-bottom:0}::-webkit-datetime-edit-year-field{padding-top:0;padding-bottom:0}::-webkit-datetime-edit-month-field{padding-top:0;padding-bottom:0}::-webkit-datetime-edit-day-field{padding-top:0;padding-bottom:0}::-webkit-datetime-edit-hour-field{padding-top:0;padding-bottom:0}::-webkit-datetime-edit-minute-field{padding-top:0;padding-bottom:0}::-webkit-datetime-edit-second-field{padding-top:0;padding-bottom:0}::-webkit-datetime-edit-millisecond-field{padding-top:0;padding-bottom:0}::-webkit-datetime-edit-meridiem-field{padding-top:0;padding-bottom:0}select{-webkit-print-color-adjust:exact;print-color-adjust:exact;background-image:url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='oklch(55.1%25 0.027 264.364)' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='M6 8l4 4 4-4'/%3e%3c/svg%3e");background-position:right .5rem center;background-repeat:no-repeat;background-size:1.5em 1.5em;padding-right:2.5rem}[multiple],[size]:where(select:not([size="1"])){background-image:initial;background-position:initial;background-repeat:unset;background-size:initial;-webkit-print-color-adjust:unset;print-color-adjust:unset;padding-right:.75rem}[type=checkbox],[type=radio]{-webkit-appearance:none;-moz-appearance:none;appearance:none;-webkit-print-color-adjust:exact;print-color-adjust:exact;vertical-align:middle;-webkit-user-select:none;user-select:none;color:#155dfc;--tw-shadow:0 0 #0000;background-color:#fff;background-origin:border-box;border-width:1px;border-color:#6a7282;flex-shrink:0;width:1rem;height:1rem;padding:0;display:inline-block}[type=checkbox]{border-radius:0}[type=radio]{border-radius:100%}[type=checkbox]:focus,[type=radio]:focus{outline-offset:2px;--tw-ring-inset:var(--tw-empty, );--tw-ring-offset-width:2px;--tw-ring-offset-color:#fff;--tw-ring-color:oklch(54.6% .245 262.881);--tw-ring-offset-shadow:var(--tw-ring-inset)0 0 0 var(--tw-ring-offset-width)var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset)0 0 0 calc(2px + var(--tw-ring-offset-width))var(--tw-ring-color);box-shadow:var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow);outline:2px solid #0000}[type=checkbox]:checked,[type=radio]:checked{background-color:currentColor;background-position:50%;background-repeat:no-repeat;background-size:100% 100%;border-color:#0000}[type=checkbox]:checked{background-image:url("data:image/svg+xml,%3csvg viewBox='0 0 16 16' fill='white' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M12.207 4.793a1 1 0 010 1.414l-5 5a1 1 0 01-1.414 0l-2-2a1 1 0 011.414-1.414L6.5 9.086l4.293-4.293a1 1 0 011.414 0z'/%3e%3c/svg%3e")}@media (forced-colors:active){[type=checkbox]:checked{-webkit-appearance:auto;-moz-appearance:auto;appearance:auto}}[type=radio]:checked{background-image:url("data:image/svg+xml,%3csvg viewBox='0 0 16 16' fill='white' xmlns='http://www.w3.org/2000/svg'%3e%3ccircle cx='8' cy='8' r='3'/%3e%3c/svg%3e")}@media (forced-colors:active){[type=radio]:checked{-webkit-appearance:auto;-moz-appearance:auto;appearance:auto}}[type=checkbox]:checked:hover,[type=checkbox]:checked:focus,[type=radio]:checked:hover,[type=radio]:checked:focus{background-color:currentColor;border-color:#0000}[type=checkbox]:indeterminate{background-color:currentColor;background-image:url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 16 16'%3e%3cpath stroke='white' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M4 8h8'/%3e%3c/svg%3e");background-position:50%;background-repeat:no-repeat;background-size:100% 100%;border-color:#0000}@media (forced-colors:active){[type=checkbox]:indeterminate{-webkit-appearance:auto;-moz-appearance:auto;appearance:auto}}[type=checkbox]:indeterminate:hover,[type=checkbox]:indeterminate:focus{background-color:currentColor;border-color:#0000}[type=file]{background:unset;border-color:inherit;font-size:unset;line-height:inherit;border-width:0;border-radius:0;padding:0}[type=file]:focus{outline:1px solid buttontext;outline:1px auto -webkit-focus-ring-color}}@layer components;@layer utilities{.mt-3{margin-top:calc(var(--spacing)*3)}.mb-1{margin-bottom:calc(var(--spacing)*1)}.flex{display:flex}.inline-flex{display:inline-flex}.h-8{height:calc(var(--spacing)*8)}.h-100{height:calc(var(--spacing)*100)}.min-w-50{min-width:calc(var(--spacing)*50)}.resize-none{resize:none}.flex-col{flex-direction:column}.items-center{align-items:center}.items-start{align-items:flex-start}.justify-center{justify-content:center}.gap-3{gap:calc(var(--spacing)*3)}.rounded-md{border-radius:var(--radius-md)}.bg-gray-500{background-color:var(--color-gray-500)}.font-medium{--tw-font-weight:var(--font-weight-medium);font-weight:var(--font-weight-medium)}.text-white{color:var(--color-white)}}#parquet-merge input,#parquet-merge select,#parquet-merge textarea{border-radius:var(--radius-md);border-color:var(--color-gray-300);--tw-shadow:0 1px 3px 0 var(--tw-shadow-color,#0000001a),0 1px 2px -1px var(--tw-shadow-color,#0000001a);box-shadow:var(--tw-inset-shadow),var(--tw-inset-ring-shadow),var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow);display:flex}:is(#parquet-merge input,#parquet-merge select,#parquet-merge textarea):focus{border-color:var(--color-indigo-300);--tw-ring-shadow:var(--tw-ring-inset,)0 0 0 calc(1px + var(--tw-ring-offset-width))var(--tw-ring-color,currentcolor);box-shadow:var(--tw-inset-shadow),var(--tw-inset-ring-shadow),var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow);--tw-ring-color:#c7d2ff80}@supports (color:color-mix(in lab,red,red)){:is(#parquet-merge input,#parquet-merge select,#parquet-merge textarea):focus{--tw-ring-color:color-mix(in oklab,var(--color-indigo-200)50%,transparent)}}#parquet-merge legend{font-size:var(--text-sm);line-height:var(--tw-leading,var(--text-sm--line-height));--tw-font-weight:var(--font-weight-medium);font-weight:var(--font-weight-medium);color:var(--color-gray-900)}#parquet-merge button{cursor:pointer;border-style:var(--tw-border-style);border-width:1px;border-color:var(--color-blue-500);padding-inline:calc(var(--spacing)*3);padding-block:calc(var(--spacing)*1.5);--tw-font-weight:var(--font-weight-semibold);font-weight:var(--font-weight-semibold);color:var(--color-blue-700);--tw-shadow:0 1px 3px 0 var(--tw-shadow-color,#0000001a),0 1px 2px -1px var(--tw-shadow-color,#0000001a);box-shadow:var(--tw-inset-shadow),var(--tw-inset-ring-shadow),var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow);background-color:#0000;border-radius:.25rem}@media (hover:hover){#parquet-merge button:hover{background-color:var(--color-blue-500);color:var(--color-white);border-color:#0000}}#parquet-merge button:disabled{cursor:not-allowed;opacity:.4}@media (hover:hover){#parquet-merge button:disabled:hover{border-color:var(--color-blue-500);color:var(--color-blue-700);background-color:#0000}}@property --tw-font-weight{syntax:"*";inherits:false}@property --tw-shadow{syntax:"*";inherits:false;initial-value:0 0 #0000}@property --tw-shadow-color{syntax:"*";inherits:false}@property --tw-shadow-alpha{syntax:"<percentage>";inherits:false;initial-value:100%}@property --tw-inset-shadow{syntax:"*";inherits:false;initial-value:0 0 #0000}@property --tw-inset-shadow-color{syntax:"*";inherits:false}@property --tw-inset-shadow-alpha{syntax:"<percentage>";inherits:false;initial-value:100%}@property --tw-ring-color{syntax:"*";inherits:false}@property --tw-ring-shadow{syntax:"*";inherits:false;initial-value:0 0 #0000}@property --tw-inset-ring-color{syntax:"*";inherits:false}@property --tw-inset-ring-shadow{syntax:"*";inherits:false;initial-value:0 0 #0000}@property --tw-ring-inset{syntax:"*";inherits:false}@property --tw-ring-offset-width{syntax:"<length>";inherits:false;initial-value:0}@property --tw-ring-offset-color{syntax:"*";inherits:false;initial-value:#fff}@property --tw-ring-offset-shadow{syntax:"*";inherits:false;initial-value:0 0 #0000}@property --tw-border-style{syntax:"*";inherits:false;initial-value:solid}`)),document.head.appendChild(e)}}catch(t){console.error("vite-plugin-css-injected-by-js",t)}})();
(function(){const n=document.createElement("link").relList;if(n&&n.supports&&n.supports("modulepreload"))return;for(const r of document.querySelectorAll('link[rel="modulepreload"]'))a(r);new MutationObserver(r=>{for(const i of r)if(i.type==="childList")for(const o of i.addedNodes)o.tagName==="LINK"&&o.rel==="modulepreload"&&a(o)}).observe(document,{childList:!0,subtree:!0});function t(r){const i={};return r.integrity&&(i.integrity=r.integrity),r.referrerPolicy&&(i.referrerPolicy=r.referrerPolicy),r.crossOrigin==="use-credentials"?i.credentials="include":r.crossOrigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function a(r){if(r.ep)return;r.ep=!0;const i=t(r);fetch(r.href,i)}})();var ee,V,Ze,k0,be,en,nn,tn,we,le,ue,O0={},rn=[],Mn=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i,ne=Array.isArray;function C0(e,n){for(var t in n)e[t]=n[t];return e}function me(e){e&&e.parentNode&&e.parentNode.removeChild(e)}function Dn(e,n,t){var a,r,i,o={};for(i in n)i=="key"?a=n[i]:i=="ref"?r=n[i]:o[i]=n[i];if(arguments.length>2&&(o.children=arguments.length>3?ee.call(arguments,2):t),typeof e=="function"&&e.defaultProps!=null)for(i in e.defaultProps)o[i]==null&&(o[i]=e.defaultProps[i]);return K0(e,o,a,r,null)}function K0(e,n,t,a,r){var i={type:e,props:n,key:t,ref:a,__k:null,__:null,__b:0,__e:null,__c:null,constructor:void 0,__v:r??++Ze,__i:-1,__u:0};return r==null&&V.vnode!=null&&V.vnode(i),i}function W0(e){return e.children}function q0(e,n){this.props=e,this.context=n}function L0(e,n){if(n==null)return e.__?L0(e.__,e.__i+1):null;for(var t;n<e.__k.length;n++)if((t=e.__k[n])!=null&&t.__e!=null)return t.__e;return typeof e.type=="function"?L0(e):null}function an(e){var n,t;if((e=e.__)!=null&&e.__c!=null){for(e.__e=e.__c.base=null,n=0;n<e.__k.length;n++)if((t=e.__k[n])!=null&&t.__e!=null){e.__e=e.__c.base=t.__e;break}return an(e)}}function Se(e){(!e.__d&&(e.__d=!0)&&k0.push(e)&&!X0.__r++||be!=V.debounceRendering)&&((be=V.debounceRendering)||en)(X0)}function X0(){for(var e,n,t,a,r,i,o,G=1;k0.length;)k0.length>G&&k0.sort(nn),e=k0.shift(),G=k0.length,e.__d&&(t=void 0,r=(a=(n=e).__v).__e,i=[],o=[],n.__P&&((t=C0({},a)).__v=a.__v+1,V.vnode&&V.vnode(t),pe(n.__P,t,a,n.__n,n.__P.namespaceURI,32&a.__u?[r]:null,i,r??L0(a),!!(32&a.__u),o),t.__v=a.__v,t.__.__k[t.__i]=t,sn(i,t,o),t.__e!=r&&an(t)));X0.__r=0}function on(e,n,t,a,r,i,o,G,u,l,d){var s,g,A,y,C,k,w=a&&a.__k||rn,E=n.length;for(u=Rn(t,n,w,u,E),s=0;s<E;s++)(A=t.__k[s])!=null&&(g=A.__i==-1?O0:w[A.__i]||O0,A.__i=s,k=pe(e,A,g,r,i,o,G,u,l,d),y=A.__e,A.ref&&g.ref!=A.ref&&(g.ref&&ye(g.ref,null,A),d.push(A.ref,A.__c||y,A)),C==null&&y!=null&&(C=y),4&A.__u||g.__k===A.__k?u=Gn(A,u,e):typeof A.type=="function"&&k!==void 0?u=k:y&&(u=y.nextSibling),A.__u&=-7);return t.__e=C,u}function Rn(e,n,t,a,r){var i,o,G,u,l,d=t.length,s=d,g=0;for(e.__k=new Array(r),i=0;i<r;i++)(o=n[i])!=null&&typeof o!="boolean"&&typeof o!="function"?(u=i+g,(o=e.__k[i]=typeof o=="string"||typeof o=="number"||typeof o=="bigint"||o.constructor==String?K0(null,o,null,null,null):ne(o)?K0(W0,{children:o},null,null,null):o.constructor==null&&o.__b>0?K0(o.type,o.props,o.key,o.ref?o.ref:null,o.__v):o).__=e,o.__b=e.__b+1,G=null,(l=o.__i=Pn(o,t,u,s))!=-1&&(s--,(G=t[l])&&(G.__u|=2)),G==null||G.__v==null?(l==-1&&(r>d?g--:r<d&&g++),typeof o.type!="function"&&(o.__u|=4)):l!=u&&(l==u-1?g--:l==u+1?g++:(l>u?g--:g++,o.__u|=4))):e.__k[i]=null;if(s)for(i=0;i<d;i++)(G=t[i])!=null&&(2&G.__u)==0&&(G.__e==a&&(a=L0(G)),un(G,G));return a}function Gn(e,n,t){var a,r;if(typeof e.type=="function"){for(a=e.__k,r=0;a&&r<a.length;r++)a[r]&&(a[r].__=e,n=Gn(a[r],n,t));return n}e.__e!=n&&(n&&e.type&&!t.contains(n)&&(n=L0(e)),t.insertBefore(e.__e,n||null),n=e.__e);do n=n&&n.nextSibling;while(n!=null&&n.nodeType==8);return n}function Pn(e,n,t,a){var r,i,o=e.key,G=e.type,u=n[t];if(u===null&&e.key==null||u&&o==u.key&&G==u.type&&(2&u.__u)==0)return t;if(a>(u!=null&&(2&u.__u)==0?1:0))for(r=t-1,i=t+1;r>=0||i<n.length;){if(r>=0){if((u=n[r])&&(2&u.__u)==0&&o==u.key&&G==u.type)return r;r--}if(i<n.length){if((u=n[i])&&(2&u.__u)==0&&o==u.key&&G==u.type)return i;i++}}return-1}function Le(e,n,t){n[0]=="-"?e.setProperty(n,t??""):e[n]=t==null?"":typeof t!="number"||Mn.test(n)?t:t+"px"}function Q0(e,n,t,a,r){var i;e:if(n=="style")if(typeof t=="string")e.style.cssText=t;else{if(typeof a=="string"&&(e.style.cssText=a=""),a)for(n in a)t&&n in t||Le(e.style,n,"");if(t)for(n in t)a&&t[n]==a[n]||Le(e.style,n,t[n])}else if(n[0]=="o"&&n[1]=="n")i=n!=(n=n.replace(tn,"$1")),n=n.toLowerCase()in e||n=="onFocusOut"||n=="onFocusIn"?n.toLowerCase().slice(2):n.slice(2),e.l||(e.l={}),e.l[n+i]=t,t?a?t.u=a.u:(t.u=we,e.addEventListener(n,i?ue:le,i)):e.removeEventListener(n,i?ue:le,i);else{if(r=="http://www.w3.org/2000/svg")n=n.replace(/xlink(H|:h)/,"h").replace(/sName$/,"s");else if(n!="width"&&n!="height"&&n!="href"&&n!="list"&&n!="form"&&n!="tabIndex"&&n!="download"&&n!="rowSpan"&&n!="colSpan"&&n!="role"&&n!="popover"&&n in e)try{e[n]=t??"";break e}catch{}typeof t=="function"||(t==null||t===!1&&n[4]!="-"?e.removeAttribute(n):e.setAttribute(n,n=="popover"&&t==1?"":t))}}function Me(e){return function(n){if(this.l){var t=this.l[n.type+e];if(n.t==null)n.t=we++;else if(n.t<t.u)return;return t(V.event?V.event(n):n)}}}function pe(e,n,t,a,r,i,o,G,u,l){var d,s,g,A,y,C,k,w,E,v,x,P,B,L,f,c,h,m=n.type;if(n.constructor!=null)return null;128&t.__u&&(u=!!(32&t.__u),i=[G=n.__e=t.__e]),(d=V.__b)&&d(n);e:if(typeof m=="function")try{if(w=n.props,E="prototype"in m&&m.prototype.render,v=(d=m.contextType)&&a[d.__c],x=d?v?v.props.value:d.__:a,t.__c?k=(s=n.__c=t.__c).__=s.__E:(E?n.__c=s=new m(w,x):(n.__c=s=new q0(w,x),s.constructor=m,s.render=Tn),v&&v.sub(s),s.props=w,s.state||(s.state={}),s.context=x,s.__n=a,g=s.__d=!0,s.__h=[],s._sb=[]),E&&s.__s==null&&(s.__s=s.state),E&&m.getDerivedStateFromProps!=null&&(s.__s==s.state&&(s.__s=C0({},s.__s)),C0(s.__s,m.getDerivedStateFromProps(w,s.__s))),A=s.props,y=s.state,s.__v=n,g)E&&m.getDerivedStateFromProps==null&&s.componentWillMount!=null&&s.componentWillMount(),E&&s.componentDidMount!=null&&s.__h.push(s.componentDidMount);else{if(E&&m.getDerivedStateFromProps==null&&w!==A&&s.componentWillReceiveProps!=null&&s.componentWillReceiveProps(w,x),!s.__e&&s.shouldComponentUpdate!=null&&s.shouldComponentUpdate(w,s.__s,x)===!1||n.__v==t.__v){for(n.__v!=t.__v&&(s.props=w,s.state=s.__s,s.__d=!1),n.__e=t.__e,n.__k=t.__k,n.__k.some(function(p){p&&(p.__=n)}),P=0;P<s._sb.length;P++)s.__h.push(s._sb[P]);s._sb=[],s.__h.length&&o.push(s);break e}s.componentWillUpdate!=null&&s.componentWillUpdate(w,s.__s,x),E&&s.componentDidUpdate!=null&&s.__h.push(function(){s.componentDidUpdate(A,y,C)})}if(s.context=x,s.props=w,s.__P=e,s.__e=!1,B=V.__r,L=0,E){for(s.state=s.__s,s.__d=!1,B&&B(n),d=s.render(s.props,s.state,s.context),f=0;f<s._sb.length;f++)s.__h.push(s._sb[f]);s._sb=[]}else do s.__d=!1,B&&B(n),d=s.render(s.props,s.state,s.context),s.state=s.__s;while(s.__d&&++L<25);s.state=s.__s,s.getChildContext!=null&&(a=C0(C0({},a),s.getChildContext())),E&&!g&&s.getSnapshotBeforeUpdate!=null&&(C=s.getSnapshotBeforeUpdate(A,y)),c=d,d!=null&&d.type===W0&&d.key==null&&(c=ln(d.props.children)),G=on(e,ne(c)?c:[c],n,t,a,r,i,o,G,u,l),s.base=n.__e,n.__u&=-161,s.__h.length&&o.push(s),k&&(s.__E=s.__=null)}catch(p){if(n.__v=null,u||i!=null)if(p.then){for(n.__u|=u?160:128;G&&G.nodeType==8&&G.nextSibling;)G=G.nextSibling;i[i.indexOf(G)]=null,n.__e=G}else for(h=i.length;h--;)me(i[h]);else n.__e=t.__e,n.__k=t.__k;V.__e(p,n,t)}else i==null&&n.__v==t.__v?(n.__k=t.__k,n.__e=t.__e):G=n.__e=Nn(t.__e,n,t,a,r,i,o,u,l);return(d=V.diffed)&&d(n),128&n.__u?void 0:G}function sn(e,n,t){for(var a=0;a<t.length;a++)ye(t[a],t[++a],t[++a]);V.__c&&V.__c(n,e),e.some(function(r){try{e=r.__h,r.__h=[],e.some(function(i){i.call(r)})}catch(i){V.__e(i,r.__v)}})}function ln(e){return typeof e!="object"||e==null||e.__b&&e.__b>0?e:ne(e)?e.map(ln):C0({},e)}function Nn(e,n,t,a,r,i,o,G,u){var l,d,s,g,A,y,C,k=t.props,w=n.props,E=n.type;if(E=="svg"?r="http://www.w3.org/2000/svg":E=="math"?r="http://www.w3.org/1998/Math/MathML":r||(r="http://www.w3.org/1999/xhtml"),i!=null){for(l=0;l<i.length;l++)if((A=i[l])&&"setAttribute"in A==!!E&&(E?A.localName==E:A.nodeType==3)){e=A,i[l]=null;break}}if(e==null){if(E==null)return document.createTextNode(w);e=document.createElementNS(r,E,w.is&&w),G&&(V.__m&&V.__m(n,i),G=!1),i=null}if(E==null)k===w||G&&e.data==w||(e.data=w);else{if(i=i&&ee.call(e.childNodes),k=t.props||O0,!G&&i!=null)for(k={},l=0;l<e.attributes.length;l++)k[(A=e.attributes[l]).name]=A.value;for(l in k)if(A=k[l],l!="children"){if(l=="dangerouslySetInnerHTML")s=A;else if(!(l in w)){if(l=="value"&&"defaultValue"in w||l=="checked"&&"defaultChecked"in w)continue;Q0(e,l,null,A,r)}}for(l in w)A=w[l],l=="children"?g=A:l=="dangerouslySetInnerHTML"?d=A:l=="value"?y=A:l=="checked"?C=A:G&&typeof A!="function"||k[l]===A||Q0(e,l,A,k[l],r);if(d)G||s&&(d.__html==s.__html||d.__html==e.innerHTML)||(e.innerHTML=d.__html),n.__k=[];else if(s&&(e.innerHTML=""),on(n.type=="template"?e.content:e,ne(g)?g:[g],n,t,a,E=="foreignObject"?"http://www.w3.org/1999/xhtml":r,i,o,i?i[0]:t.__k&&L0(t,0),G,u),i!=null)for(l=i.length;l--;)me(i[l]);G||(l="value",E=="progress"&&y==null?e.removeAttribute("value"):y!=null&&(y!==e[l]||E=="progress"&&!y||E=="option"&&y!=k[l])&&Q0(e,l,y,k[l],r),l="checked",C!=null&&C!=e[l]&&Q0(e,l,C,k[l],r))}return e}function ye(e,n,t){try{if(typeof e=="function"){var a=typeof e.__u=="function";a&&e.__u(),a&&n==null||(e.__u=e(n))}else e.current=n}catch(r){V.__e(r,t)}}function un(e,n,t){var a,r;if(V.unmount&&V.unmount(e),(a=e.ref)&&(a.current&&a.current!=e.__e||ye(a,null,n)),(a=e.__c)!=null){if(a.componentWillUnmount)try{a.componentWillUnmount()}catch(i){V.__e(i,n)}a.base=a.__P=null}if(a=e.__k)for(r=0;r<a.length;r++)a[r]&&un(a[r],n,t||typeof e.type!="function");t||me(e.__e),e.__c=e.__=e.__e=void 0}function Tn(e,n,t){return this.constructor(e,t)}function On(e,n,t){var a,r,i,o;n==document&&(n=document.documentElement),V.__&&V.__(e,n),r=(a=!1)?null:n.__k,i=[],o=[],pe(n,e=n.__k=Dn(W0,null,[e]),r||O0,O0,n.namespaceURI,r?null:n.firstChild?ee.call(n.childNodes):null,i,r?r.__e:n.firstChild,a,o),sn(i,e,o)}ee=rn.slice,V={__e:function(e,n,t,a){for(var r,i,o;n=n.__;)if((r=n.__c)&&!r.__)try{if((i=r.constructor)&&i.getDerivedStateFromError!=null&&(r.setState(i.getDerivedStateFromError(e)),o=r.__d),r.componentDidCatch!=null&&(r.componentDidCatch(e,a||{}),o=r.__d),o)return r.__E=r}catch(G){e=G}throw e}},Ze=0,q0.prototype.setState=function(e,n){var t;t=this.__s!=null&&this.__s!=this.state?this.__s:this.__s=C0({},this.state),typeof e=="function"&&(e=e(C0({},t),this.props)),e&&C0(t,e),e!=null&&this.__v&&(n&&this._sb.push(n),Se(this))},q0.prototype.forceUpdate=function(e){this.__v&&(this.__e=!0,e&&this.__h.push(e),Se(this))},q0.prototype.render=W0,k0=[],en=typeof Promise=="function"?Promise.prototype.then.bind(Promise.resolve()):setTimeout,nn=function(e,n){return e.__v.__b-n.__v.__b},X0.__r=0,tn=/(PointerCapture)$|Capture$/i,we=0,le=Me(!1),ue=Me(!0);var Fn=0;function K(e,n,t,a,r,i){n||(n={});var o,G,u=n;if("ref"in u)for(G in u={},n)G=="ref"?o=n[G]:u[G]=n[G];var l={type:e,props:u,key:t,ref:o,__k:null,__:null,__b:0,__e:null,__c:null,constructor:void 0,__v:--Fn,__i:-1,__u:0,__source:r,__self:i};if(typeof e=="function"&&(o=e.defaultProps))for(G in o)u[G]===void 0&&(u[G]=o[G]);return V.vnode&&V.vnode(l),l}const De=["BOOLEAN","INT32","INT64","INT96","FLOAT","DOUBLE","BYTE_ARRAY","FIXED_LEN_BYTE_ARRAY"],E0=["PLAIN","GROUP_VAR_INT","PLAIN_DICTIONARY","RLE","BIT_PACKED","DELTA_BINARY_PACKED","DELTA_LENGTH_BYTE_ARRAY","DELTA_BYTE_ARRAY","RLE_DICTIONARY","BYTE_STREAM_SPLIT"],Wn=["REQUIRED","OPTIONAL","REPEATED"],Hn=["UTF8","MAP","MAP_KEY_VALUE","LIST","ENUM","DECIMAL","DATE","TIME_MILLIS","TIME_MICROS","TIMESTAMP_MILLIS","TIMESTAMP_MICROS","UINT_8","UINT_16","UINT_32","UINT_64","INT_8","INT_16","INT_32","INT_64","JSON","BSON","INTERVAL"],Qn=["UNCOMPRESSED","SNAPPY","GZIP","LZO","BROTLI","LZ4","ZSTD","LZ4_RAW"],fn=["DATA_PAGE","INDEX_PAGE","DICTIONARY_PAGE","DATA_PAGE_V2"],cn=864e5;function Re(e,n,t,a,r){if(n&&a.endsWith("_DICTIONARY")){let i=e;e instanceof Uint8Array&&!(n instanceof Uint8Array)&&(i=new n.constructor(e.length));for(let o=0;o<e.length;o++)i[o]=n[e[o]];return i}else return hn(e,t,r)}function hn(e,n,t=!0){const{type:a,converted_type:r,logical_type:i}=n;if(r==="DECIMAL"){const G=10**-(n.scale||0),u=new Array(e.length);for(let l=0;l<u.length;l++)e[0]instanceof Uint8Array?u[l]=dn(e[l])*G:u[l]=Number(e[l])*G;return u}if(!r&&a==="INT96")return Array.from(e).map(xn);if(r==="DATE"){const o=new Array(e.length);for(let G=0;G<o.length;G++)o[G]=new Date(e[G]*cn);return o}if(r==="TIMESTAMP_MILLIS"){const o=new Array(e.length);for(let G=0;G<o.length;G++)o[G]=new Date(Number(e[G]));return o}if(r==="TIMESTAMP_MICROS"){const o=new Array(e.length);for(let G=0;G<o.length;G++)o[G]=new Date(Number(e[G]/1000n));return o}if(r==="JSON"){const o=new TextDecoder;return e.map(G=>JSON.parse(o.decode(G)))}if(r==="BSON")throw new Error("parquet bson not supported");if(r==="INTERVAL")throw new Error("parquet interval not supported");if(r==="UTF8"||(i==null?void 0:i.type)==="STRING"||t&&a==="BYTE_ARRAY"){const o=new TextDecoder,G=new Array(e.length);for(let u=0;u<G.length;u++)G[u]=e[u]&&o.decode(e[u]);return G}if(r==="UINT_64"||(i==null?void 0:i.type)==="INTEGER"&&i.bitWidth===64&&!i.isSigned){if(e instanceof BigInt64Array)return new BigUint64Array(e.buffer,e.byteOffset,e.length);const o=new BigUint64Array(e.length);for(let G=0;G<o.length;G++)o[G]=BigInt(e[G]);return o}if(r==="UINT_32"||(i==null?void 0:i.type)==="INTEGER"&&i.bitWidth===32&&!i.isSigned){if(e instanceof Int32Array)return new Uint32Array(e.buffer,e.byteOffset,e.length);const o=new Uint32Array(e.length);for(let G=0;G<o.length;G++)o[G]=e[G];return o}if((i==null?void 0:i.type)==="FLOAT16")return Array.from(e).map(An);if((i==null?void 0:i.type)==="TIMESTAMP"){const{unit:o}=i;let G=1n;o==="MICROS"&&(G=1000n),o==="NANOS"&&(G=1000000n);const u=new Array(e.length);for(let l=0;l<u.length;l++)u[l]=new Date(Number(e[l]/G));return u}return e}function dn(e){let n=0;for(const a of e)n=n*256+a;const t=e.length*8;return n>=2**(t-1)&&(n-=2**t),n}function xn(e){const n=Number((e>>64n)-2440588n),t=Number((e&0xffffffffffffffffn)/1000000n),a=n*cn+t;return new Date(a)}function An(e){if(!e)return;const n=e[1]<<8|e[0],t=n>>15?-1:1,a=n>>10&31,r=n&1023;return a===0?t*2**-14*(r/1024):a===31?r?NaN:t*(1/0):t*2**(a-15)*(1+r/1024)}function _n(e,n,t){const a=e[n],r=[];let i=1;if(a.num_children)for(;r.length<a.num_children;){const o=e[n+i],G=_n(e,n+i,[...t,o.name]);i+=G.count,r.push(G)}return{count:i,element:a,children:r,path:t}}function Pe(e,n){let t=_n(e,0,[]);const a=[t];for(const r of n){const i=t.children.find(o=>o.element.name===r);if(!i)throw new Error(`parquet schema element not found: ${n}`);a.push(i),t=i}return a}function gn(e){let n=0;for(const{element:t}of e)t.repetition_type==="REPEATED"&&n++;return n}function Ce(e){let n=0;for(const{element:t}of e.slice(1))t.repetition_type!=="REQUIRED"&&n++;return n}function Un(e){if(!e||e.element.converted_type!=="LIST"||e.children.length>1)return!1;const n=e.children[0];return!(n.children.length>1||n.element.repetition_type!=="REPEATED")}function Jn(e){if(!e||e.element.converted_type!=="MAP"||e.children.length>1)return!1;const n=e.children[0];if(n.children.length!==2||n.element.repetition_type!=="REPEATED")return!1;const t=n.children.find(r=>r.element.name==="key");if((t==null?void 0:t.element.repetition_type)==="REPEATED")return!1;const a=n.children.find(r=>r.element.name==="value");return(a==null?void 0:a.element.repetition_type)!=="REPEATED"}function Kn(e){if(e.length!==2)return!1;const[,n]=e;return!(n.element.repetition_type==="REPEATED"||n.children.length)}const A0={STOP:0,TRUE:1,FALSE:2,BYTE:3,I16:4,I32:5,I64:6,DOUBLE:7,BINARY:8,LIST:9,STRUCT:12};function wn(e){let n=0;const t={};for(;e.offset<e.view.byteLength;){const[a,r,i]=pn(e,n);if(n=i,a===A0.STOP)break;t[`field_${r}`]=Y0(e,a)}return t}function Y0(e,n){switch(n){case A0.TRUE:return!0;case A0.FALSE:return!1;case A0.BYTE:return e.view.getInt8(e.offset++);case A0.I16:case A0.I32:return Yn(e);case A0.I64:return fe(e);case A0.DOUBLE:{const t=e.view.getFloat64(e.offset,!0);return e.offset+=8,t}case A0.BINARY:{const t=B0(e),a=new Uint8Array(e.view.buffer,e.view.byteOffset+e.offset,t);return e.offset+=t,a}case A0.LIST:{const[t,a]=zn(e),r=t===A0.TRUE||t===A0.FALSE,i=new Array(a);for(let o=0;o<a;o++)i[o]=r?Y0(e,A0.BYTE)===1:Y0(e,t);return i}case A0.STRUCT:{const t={};let a=0;for(;;){let r,i;if([r,i,a]=pn(e,a),r===A0.STOP)break;t[`field_${i}`]=Y0(e,r)}return t}default:throw new Error(`thrift unhandled type: ${n}`)}}function B0(e){let n=0,t=0;for(;;){const a=e.view.getUint8(e.offset++);if(n|=(a&127)<<t,!(a&128))return n;t+=7}}function qn(e){let n=0n,t=0n;for(;;){const a=e.view.getUint8(e.offset++);if(n|=BigInt(a&127)<<t,!(a&128))return n;t+=7n}}function Yn(e){const n=B0(e);return n>>>1^-(n&1)}function fe(e){const n=qn(e);return n>>1n^-(n&1n)}function mn(e){return e&15}function pn(e,n){const t=e.view.getUint8(e.offset++);if((t&15)===A0.STOP)return[0,0,n];const a=t>>4;let r;if(a)r=n+a;else throw new Error("non-delta field id not supported");return[mn(t),r,r]}function zn(e){const n=e.view.getUint8(e.offset++),t=n>>4,a=mn(n);if(t===15){const r=B0(e);return[a,r]}return[a,t]}const jn=1<<19;async function Vn(e,n=jn){if(!e||!(e.byteLength>=0))throw new Error("parquetMetadataAsync expected AsyncBuffer");const t=Math.max(0,e.byteLength-n),a=await e.slice(t,e.byteLength),r=new DataView(a);if(r.getUint32(a.byteLength-4,!0)!==827474256)throw new Error("parquet file invalid (footer != PAR1)");const i=r.getUint32(a.byteLength-8,!0);if(i>e.byteLength-8)throw new Error(`parquet metadata length ${i} exceeds available buffer ${e.byteLength-8}`);if(i+8>n){const o=e.byteLength-i-8,G=await e.slice(o,t),u=new ArrayBuffer(i+8),l=new Uint8Array(u);return l.set(new Uint8Array(G)),l.set(new Uint8Array(a),t-o),Ne(u)}else return Ne(a)}function Ne(e){var k;if(!(e instanceof ArrayBuffer))throw new Error("parquetMetadata expected ArrayBuffer");const n=new DataView(e);if(n.byteLength<8)throw new Error("parquet file is too short");if(n.getUint32(n.byteLength-4,!0)!==827474256)throw new Error("parquet file invalid (footer != PAR1)");const t=n.byteLength-8,a=n.getUint32(t,!0);if(a>n.byteLength-8)throw new Error(`parquet metadata length ${a} exceeds available buffer ${n.byteLength-8}`);const r=t-a,o=wn({view:n,offset:r}),G=new TextDecoder;function u(w){return w&&G.decode(w)}const l=o.field_1,d=o.field_2.map(w=>({type:De[w.field_1],type_length:w.field_2,repetition_type:Wn[w.field_3],name:u(w.field_4),num_children:w.field_5,converted_type:Hn[w.field_6],scale:w.field_7,precision:w.field_8,field_id:w.field_9,logical_type:$n(w.field_10)})),s=d.filter(w=>w.type),g=o.field_3,A=o.field_4.map(w=>{var E;return{columns:w.field_1.map((v,x)=>{var P,B;return{file_path:u(v.field_1),file_offset:v.field_2,meta_data:v.field_3&&{type:De[v.field_3.field_1],encodings:(P=v.field_3.field_2)==null?void 0:P.map(L=>E0[L]),path_in_schema:v.field_3.field_3.map(u),codec:Qn[v.field_3.field_4],num_values:v.field_3.field_5,total_uncompressed_size:v.field_3.field_6,total_compressed_size:v.field_3.field_7,key_value_metadata:v.field_3.field_8,data_page_offset:v.field_3.field_9,index_page_offset:v.field_3.field_10,dictionary_page_offset:v.field_3.field_11,statistics:Xn(v.field_3.field_12,s[x]),encoding_stats:(B=v.field_3.field_13)==null?void 0:B.map(L=>({page_type:fn[L.field_1],encoding:E0[L.field_2],count:L.field_3})),bloom_filter_offset:v.field_3.field_14,bloom_filter_length:v.field_3.field_15,size_statistics:v.field_3.field_16&&{unencoded_byte_array_data_bytes:v.field_3.field_16.field_1,repetition_level_histogram:v.field_3.field_16.field_2,definition_level_histogram:v.field_3.field_16.field_3}},offset_index_offset:v.field_4,offset_index_length:v.field_5,column_index_offset:v.field_6,column_index_length:v.field_7,crypto_metadata:v.field_8,encrypted_column_metadata:v.field_9}}),total_byte_size:w.field_2,num_rows:w.field_3,sorting_columns:(E=w.field_4)==null?void 0:E.map(v=>({column_idx:v.field_1,descending:v.field_2,nulls_first:v.field_3})),file_offset:w.field_5,total_compressed_size:w.field_6,ordinal:w.field_7}}),y=(k=o.field_5)==null?void 0:k.map(w=>({key:u(w.field_1),value:u(w.field_2)})),C=u(o.field_6);return{version:l,schema:d,num_rows:g,row_groups:A,key_value_metadata:y,created_by:C,metadata_length:a}}function $n(e){return e!=null&&e.field_1?{type:"STRING"}:e!=null&&e.field_2?{type:"MAP"}:e!=null&&e.field_3?{type:"LIST"}:e!=null&&e.field_4?{type:"ENUM"}:e!=null&&e.field_5?{type:"DECIMAL",scale:e.field_5.field_1,precision:e.field_5.field_2}:e!=null&&e.field_6?{type:"DATE"}:e!=null&&e.field_7?{type:"TIME",isAdjustedToUTC:e.field_7.field_1,unit:Te(e.field_7.field_2)}:e!=null&&e.field_8?{type:"TIMESTAMP",isAdjustedToUTC:e.field_8.field_1,unit:Te(e.field_8.field_2)}:e!=null&&e.field_10?{type:"INTEGER",bitWidth:e.field_10.field_1,isSigned:e.field_10.field_2}:e!=null&&e.field_11?{type:"NULL"}:e!=null&&e.field_12?{type:"JSON"}:e!=null&&e.field_13?{type:"BSON"}:e!=null&&e.field_14?{type:"UUID"}:e!=null&&e.field_15?{type:"FLOAT16"}:e}function Te(e){if(e.field_1)return"MILLIS";if(e.field_2)return"MICROS";if(e.field_3)return"NANOS";throw new Error("parquet time unit required")}function Xn(e,n){return e&&{max:x0(e.field_1,n),min:x0(e.field_2,n),null_count:e.field_3,distinct_count:e.field_4,max_value:x0(e.field_5,n),min_value:x0(e.field_6,n),is_max_value_exact:e.field_7,is_min_value_exact:e.field_8}}function x0(e,n){const{type:t,converted_type:a,logical_type:r}=n;if(e===void 0)return e;if(t==="BOOLEAN")return e[0]===1;if(t==="BYTE_ARRAY")return new TextDecoder().decode(e);const i=new DataView(e.buffer,e.byteOffset,e.byteLength);return t==="FLOAT"&&i.byteLength===4?i.getFloat32(0,!0):t==="DOUBLE"&&i.byteLength===8?i.getFloat64(0,!0):t==="INT32"&&a==="DATE"?new Date(i.getInt32(0,!0)*864e5):t==="INT64"&&a==="TIMESTAMP_MICROS"?new Date(Number(i.getBigInt64(0,!0)/1000n)):t==="INT64"&&a==="TIMESTAMP_MILLIS"?new Date(Number(i.getBigInt64(0,!0))):t==="INT64"&&(r==null?void 0:r.type)==="TIMESTAMP"&&(r==null?void 0:r.unit)==="NANOS"?new Date(Number(i.getBigInt64(0,!0)/1000000n)):t==="INT64"&&(r==null?void 0:r.type)==="TIMESTAMP"&&(r==null?void 0:r.unit)==="MICROS"?new Date(Number(i.getBigInt64(0,!0)/1000n)):t==="INT64"&&(r==null?void 0:r.type)==="TIMESTAMP"?new Date(Number(i.getBigInt64(0,!0))):t==="INT32"&&i.byteLength===4?i.getInt32(0,!0):t==="INT64"&&i.byteLength===8?i.getBigInt64(0,!0):a==="DECIMAL"?dn(e)*10**-(n.scale||0):(r==null?void 0:r.type)==="FLOAT16"?An(e):e}function Oe(e,n,t,a,r){const i=(n==null?void 0:n.length)||t.length;if(!i)return a;const o=Ce(r),G=r.map(({element:y})=>y.repetition_type);let u=0;const l=[e];let d=e,s=0,g=0,A=0;if(t[0])for(;s<G.length-2&&A<t[0];){if(!d)throw new Error("parquet cannot resume previous page");d=d.at(-1),l.push(d),s++,G[s]!=="REQUIRED"&&g++,G[s]==="REPEATED"&&A++}for(let y=0;y<i;y++){const C=n!=null&&n.length?n[y]:o,k=t[y];for(;s&&(k<A||G[s]!=="REPEATED");)G[s]!=="REQUIRED"&&(l.pop(),g--),G[s]==="REPEATED"&&A--,s--;for(d=l.at(-1);(s<G.length-2||G[s+1]==="REPEATED")&&(g<C||G[s+1]==="REQUIRED");){if(s++,G[s]!=="REQUIRED"){const w=[];d.push(w),d=w,l.push(w),g++}G[s]==="REPEATED"&&A++}C===o?d.push(a[u++]):s===G.length-2?d.push(null):d.push([])}if(!e.length)for(let y=0;y<o;y++){const C=[];d.push(C),d=C}return e}function P0(e,n,t=0){const a=n.path.join("."),r=n.element.repetition_type==="OPTIONAL",i=r?t+1:t;if(Un(n)){let o=n.children[0],G=i;o.children.length===1&&(o=o.children[0],G++),P0(e,o,G);const u=o.path.join("."),l=e.get(u);if(!l)throw new Error("parquet list column missing values");r&&z0(l,t),e.set(a,l),e.delete(u);return}if(Jn(n)){const o=n.children[0].element.name;P0(e,n.children[0].children[0],i+1),P0(e,n.children[0].children[1],i+1);const G=e.get(`${a}.${o}.key`),u=e.get(`${a}.${o}.value`);if(!G)throw new Error("parquet map column missing keys");if(!u)throw new Error("parquet map column missing values");if(G.length!==u.length)throw new Error("parquet map column key/value length mismatch");const l=yn(G,u,i);r&&z0(l,t),e.delete(`${a}.${o}.key`),e.delete(`${a}.${o}.value`),e.set(a,l);return}if(n.children.length){const o=n.element.repetition_type==="REQUIRED"?t:t+1,G={};for(const l of n.children){P0(e,l,o);const d=e.get(l.path.join("."));if(!d)throw new Error("parquet struct missing child data");G[l.element.name]=d}for(const l of n.children)e.delete(l.path.join("."));const u=Cn(G,o);r&&z0(u,t),e.set(a,u)}}function z0(e,n){for(let t=0;t<e.length;t++)n?z0(e[t],n-1):e[t]=e[t][0]}function yn(e,n,t){const a=[];for(let r=0;r<e.length;r++)if(t)a.push(yn(e[r],n[r],t-1));else if(e[r]){const i={};for(let o=0;o<e[r].length;o++){const G=n[r][o];i[e[r][o]]=G===void 0?null:G}a.push(i)}else a.push(void 0);return a}function Cn(e,n){var i;const t=Object.keys(e),a=(i=e[t[0]])==null?void 0:i.length,r=[];for(let o=0;o<a;o++){const G={};for(const u of t){if(e[u].length!==a)throw new Error("parquet struct parsing error");G[u]=e[u][o]}n?r.push(Cn(G,n-1)):r.push(G)}return r}function F0(e,n,t){const a=t instanceof Int32Array,r=B0(e),i=B0(e);B0(e);let o=fe(e),G=0;t[G++]=a?Number(o):o;const u=r/i;for(;G<n;){const l=fe(e),d=new Uint8Array(i);for(let s=0;s<i;s++)d[s]=e.view.getUint8(e.offset++);for(let s=0;s<i&&G<n;s++){const g=BigInt(d[s]);if(g){let A=0n,y=u;const C=(1n<<g)-1n;for(;y&&G<n;){let k=BigInt(e.view.getUint8(e.offset))>>A&C;for(A+=g;A>=8;)A-=8n,e.offset++,A&&(k|=BigInt(e.view.getUint8(e.offset))<<g-A&C);const w=l+k;o+=w,t[G++]=a?Number(o):o,y--}y&&(e.offset+=Math.ceil((y*Number(g)+Number(A))/8))}else for(let A=0;A<u&&G<n;A++)o+=l,t[G++]=a?Number(o):o}}}function vn(e,n,t){const a=new Int32Array(n);F0(e,n,a);for(let r=0;r<n;r++)t[r]=new Uint8Array(e.view.buffer,e.view.byteOffset+e.offset,a[r]),e.offset+=a[r]}function Zn(e,n,t){const a=new Int32Array(n);F0(e,n,a);const r=new Int32Array(n);F0(e,n,r);for(let i=0;i<n;i++){const o=new Uint8Array(e.view.buffer,e.view.byteOffset+e.offset,r[i]);a[i]?(t[i]=new Uint8Array(a[i]+r[i]),t[i].set(t[i-1].subarray(0,a[i])),t[i].set(o,a[i])):t[i]=o,e.offset+=r[i]}}function te(e){return 32-Math.clz32(e)}function v0(e,n,t,a){t||(e.offset+=4);let r=0;for(;r<a.length;){const i=B0(e);if(i&1)r=nt(e,i,n,a,r);else{const o=i>>>1;et(e,o,n,a,r),r+=o}}}function et(e,n,t,a,r){const i=t+7>>3;let o=0;for(let G=0;G<i;G++)o|=e.view.getUint8(e.offset++)<<(G<<3);for(let G=0;G<n;G++)a[r+G]=o}function nt(e,n,t,a,r){let i=n>>1<<3;const o=(1<<t)-1;let G=0;if(e.offset<e.view.byteLength)G=e.view.getUint8(e.offset++);else if(o)throw new Error(`parquet bitpack offset ${e.offset} out of range`);let u=8,l=0;for(;i;)l>8?(l-=8,u-=8,G>>>=8):u-l<t?(G|=e.view.getUint8(e.offset)<<u,e.offset++,u+=8):(r<a.length&&(a[r++]=G>>l&o),i--,l+=t);return r}function kn(e,n,t,a){const r=tt(t,a),i=new Uint8Array(n*r);for(let o=0;o<r;o++)for(let G=0;G<n;G++)i[G*r+o]=e.view.getUint8(e.offset++);if(t==="FLOAT")return new Float32Array(i.buffer);if(t==="DOUBLE")return new Float64Array(i.buffer);if(t==="INT32")return new Int32Array(i.buffer);if(t==="INT64")return new BigInt64Array(i.buffer);if(t==="FIXED_LEN_BYTE_ARRAY"){const o=new Array(n);for(let G=0;G<n;G++)o[G]=i.subarray(G*r,(G+1)*r);return o}throw new Error(`parquet byte_stream_split unsupported type: ${t}`)}function tt(e,n){switch(e){case"INT32":case"FLOAT":return 4;case"INT64":case"DOUBLE":return 8;case"FIXED_LEN_BYTE_ARRAY":if(!n)throw new Error("parquet byteWidth missing type_length");return n;default:throw new Error(`parquet unsupported type: ${e}`)}}function ve(e,n,t,a){if(t===0)return[];if(n==="BOOLEAN")return rt(e,t);if(n==="INT32")return at(e,t);if(n==="INT64")return it(e,t);if(n==="INT96")return ot(e,t);if(n==="FLOAT")return Gt(e,t);if(n==="DOUBLE")return st(e,t);if(n==="BYTE_ARRAY")return lt(e,t);if(n==="FIXED_LEN_BYTE_ARRAY"){if(!a)throw new Error("parquet missing fixed length");return ut(e,t,a)}else throw new Error(`parquet unhandled type: ${n}`)}function rt(e,n){const t=new Array(n);for(let a=0;a<n;a++){const r=e.offset+(a/8|0),i=a%8,o=e.view.getUint8(r);t[a]=(o&1<<i)!==0}return e.offset+=Math.ceil(n/8),t}function at(e,n){const t=(e.view.byteOffset+e.offset)%4?new Int32Array(re(e.view.buffer,e.view.byteOffset+e.offset,n*4)):new Int32Array(e.view.buffer,e.view.byteOffset+e.offset,n);return e.offset+=n*4,t}function it(e,n){const t=(e.view.byteOffset+e.offset)%8?new BigInt64Array(re(e.view.buffer,e.view.byteOffset+e.offset,n*8)):new BigInt64Array(e.view.buffer,e.view.byteOffset+e.offset,n);return e.offset+=n*8,t}function ot(e,n){const t=new Array(n);for(let a=0;a<n;a++){const r=e.view.getBigInt64(e.offset+a*12,!0),i=e.view.getInt32(e.offset+a*12+8,!0);t[a]=BigInt(i)<<64n|r}return e.offset+=n*12,t}function Gt(e,n){const t=(e.view.byteOffset+e.offset)%4?new Float32Array(re(e.view.buffer,e.view.byteOffset+e.offset,n*4)):new Float32Array(e.view.buffer,e.view.byteOffset+e.offset,n);return e.offset+=n*4,t}function st(e,n){const t=(e.view.byteOffset+e.offset)%8?new Float64Array(re(e.view.buffer,e.view.byteOffset+e.offset,n*8)):new Float64Array(e.view.buffer,e.view.byteOffset+e.offset,n);return e.offset+=n*8,t}function lt(e,n){const t=new Array(n);for(let a=0;a<n;a++){const r=e.view.getUint32(e.offset,!0);e.offset+=4,t[a]=new Uint8Array(e.view.buffer,e.view.byteOffset+e.offset,r),e.offset+=r}return t}function ut(e,n,t){const a=new Array(n);for(let r=0;r<n;r++)a[r]=new Uint8Array(e.view.buffer,e.view.byteOffset+e.offset,t),e.offset+=t;return a}function re(e,n,t){const a=new ArrayBuffer(t);return new Uint8Array(a).set(new Uint8Array(e,n,t)),a}const ft=[0,255,65535,16777215,4294967295];function Fe(e,n,t,a,r){for(let i=0;i<r;i++)t[a+i]=e[n+i]}function ct(e,n){const t=e.byteLength,a=n.byteLength;let r=0,i=0;for(;r<t;){const o=e[r];if(r++,o<128)break}if(a&&r>=t)throw new Error("invalid snappy length header");for(;r<t;){const o=e[r];let G=0;if(r++,r>=t)throw new Error("missing eof marker");if((o&3)===0){let u=(o>>>2)+1;if(u>60){if(r+3>=t)throw new Error("snappy error literal pos + 3 >= inputLength");const l=u-60;u=e[r]+(e[r+1]<<8)+(e[r+2]<<16)+(e[r+3]<<24),u=(u&ft[l])+1,r+=l}if(r+u>t)throw new Error("snappy error literal exceeds input length");Fe(e,r,n,i,u),r+=u,i+=u}else{let u=0;switch(o&3){case 1:G=(o>>>2&7)+4,u=e[r]+(o>>>5<<8),r++;break;case 2:if(t<=r+1)throw new Error("snappy error end of input");G=(o>>>2)+1,u=e[r]+(e[r+1]<<8),r+=2;break;case 3:if(t<=r+3)throw new Error("snappy error end of input");G=(o>>>2)+1,u=e[r]+(e[r+1]<<8)+(e[r+2]<<16)+(e[r+3]<<24),r+=4;break}if(u===0||isNaN(u))throw new Error(`invalid offset ${u} pos ${r} inputLength ${t}`);if(u>i)throw new Error("cannot copy from before start of buffer");Fe(n,i-u,n,i,G),i+=G}}if(i!==a)throw new Error("premature end of input")}function ht(e,n,{type:t,element:a,schemaPath:r}){const i=new DataView(e.buffer,e.byteOffset,e.byteLength),o={view:i,offset:0};let G;const u=dt(o,n,r),{definitionLevels:l,numNulls:d}=At(o,n,r),s=n.num_values-d;if(n.encoding==="PLAIN")G=ve(o,t,s,a.type_length);else if(n.encoding==="PLAIN_DICTIONARY"||n.encoding==="RLE_DICTIONARY"||n.encoding==="RLE"){const g=t==="BOOLEAN"?1:i.getUint8(o.offset++);g?(G=new Array(s),t==="BOOLEAN"?(v0(o,g,0,G),G=G.map(A=>!!A)):v0(o,g,i.byteLength-o.offset,G)):G=new Uint8Array(s)}else if(n.encoding==="BYTE_STREAM_SPLIT")G=kn(o,s,t,a.type_length);else if(n.encoding==="DELTA_BINARY_PACKED")G=t==="INT32"?new Int32Array(s):new BigInt64Array(s),F0(o,s,G);else if(n.encoding==="DELTA_LENGTH_BYTE_ARRAY")G=new Array(s),vn(o,s,G);else throw new Error(`parquet unsupported encoding: ${n.encoding}`);return{definitionLevels:l,repetitionLevels:u,dataPage:G}}function dt(e,n,t){if(t.length>1){const a=gn(t);if(a){const r=new Array(n.num_values);return v0(e,te(a),0,r),r}}return[]}function At(e,n,t){const a=Ce(t);if(!a)return{definitionLevels:[],numNulls:0};const r=new Array(n.num_values);v0(e,te(a),0,r);let i=n.num_values;for(const o of r)o===a&&i--;return i===0&&(r.length=0),{definitionLevels:r,numNulls:i}}function ce(e,n,t,a){let r;const i=a==null?void 0:a[t];if(t==="UNCOMPRESSED")r=e;else if(i)r=i(e,n);else if(t==="SNAPPY")r=new Uint8Array(n),ct(e,r);else throw new Error(`parquet unsupported compression codec: ${t}`);if((r==null?void 0:r.length)!==n)throw new Error(`parquet decompressed page length ${r==null?void 0:r.length} does not match header ${n}`);return r}function _t(e,n,t){const r={view:new DataView(e.buffer,e.byteOffset,e.byteLength),offset:0},{type:i,element:o,schemaPath:G,codec:u,compressors:l}=t,d=n.data_page_header_v2;if(!d)throw new Error("parquet data page header v2 is undefined");const s=gt(r,d,G);r.offset=d.repetition_levels_byte_length;const g=wt(r,d,G),A=n.uncompressed_page_size-d.definition_levels_byte_length-d.repetition_levels_byte_length;let y=e.subarray(r.offset);d.is_compressed!==!1&&(y=ce(y,A,u,l));const C=new DataView(y.buffer,y.byteOffset,y.byteLength),k={view:C,offset:0};let w;const E=d.num_values-d.num_nulls;if(d.encoding==="PLAIN")w=ve(k,i,E,o.type_length);else if(d.encoding==="RLE")w=new Array(E),v0(k,1,0,w),w=w.map(v=>!!v);else if(d.encoding==="PLAIN_DICTIONARY"||d.encoding==="RLE_DICTIONARY"){const v=C.getUint8(k.offset++);w=new Array(E),v0(k,v,A-1,w)}else if(d.encoding==="DELTA_BINARY_PACKED")w=i==="INT32"?new Int32Array(E):new BigInt64Array(E),F0(k,E,w);else if(d.encoding==="DELTA_LENGTH_BYTE_ARRAY")w=new Array(E),vn(k,E,w);else if(d.encoding==="DELTA_BYTE_ARRAY")w=new Array(E),Zn(k,E,w);else if(d.encoding==="BYTE_STREAM_SPLIT")w=kn(r,E,i,o.type_length);else throw new Error(`parquet unsupported encoding: ${d.encoding}`);return{definitionLevels:g,repetitionLevels:s,dataPage:w}}function gt(e,n,t){const a=gn(t);if(!a)return[];const r=new Array(n.num_values);return v0(e,te(a),n.repetition_levels_byte_length,r),r}function wt(e,n,t){const a=Ce(t);if(a){const r=new Array(n.num_values);return v0(e,te(a),n.definition_levels_byte_length,r),r}}function mt(e,{groupStart:n,selectStart:t,selectEnd:a},r,i){const{columnName:o,element:G,utf8:u}=r,l=[];let d,s,g=0;const A=i&&(()=>{s&&i({columnName:o,columnData:s,rowStart:n+g-s.length,rowEnd:n+g})});for(;g<a&&!(e.offset>=e.view.byteLength-1);){const y=pt(e);if(y.type==="DICTIONARY_PAGE")d=We(e,y,r,d,void 0,0),d=hn(d,G,u);else{const C=(s==null?void 0:s.length)||0,k=We(e,y,r,d,s,t-g);s===k?g+=k.length-C:(A==null||A(),l.push(k),g+=k.length,s=k)}}return A==null||A(),g>a&&s&&(l[l.length-1]=s.slice(0,a-(g-s.length))),l}function We(e,n,t,a,r,i){const{type:o,element:G,schemaPath:u,codec:l,compressors:d,utf8:s}=t,g=new Uint8Array(e.view.buffer,e.view.byteOffset+e.offset,n.compressed_page_size);if(e.offset+=n.compressed_page_size,n.type==="DATA_PAGE"){const A=n.data_page_header;if(!A)throw new Error("parquet data page header is undefined");if(i>A.num_values&&Kn(u))return new Array(A.num_values);const y=ce(g,Number(n.uncompressed_page_size),l,d),{definitionLevels:C,repetitionLevels:k,dataPage:w}=ht(y,A,t);let E=Re(w,a,G,A.encoding,s);if(k.length||C!=null&&C.length){const v=Array.isArray(r)?r:[];return Oe(v,C,k,E,u)}else{for(let v=2;v<u.length;v++)u[v].element.repetition_type!=="REQUIRED"&&(E=Array.from(E,x=>[x]));return E}}else if(n.type==="DATA_PAGE_V2"){const A=n.data_page_header_v2;if(!A)throw new Error("parquet data page header v2 is undefined");if(i>A.num_rows)return new Array(A.num_values);const{definitionLevels:y,repetitionLevels:C,dataPage:k}=_t(g,n,t),w=Re(k,a,G,A.encoding,s),E=Array.isArray(r)?r:[];return Oe(E,y,C,w,u)}else if(n.type==="DICTIONARY_PAGE"){const A=n.dictionary_page_header;if(!A)throw new Error("parquet dictionary page header is undefined");const y=ce(g,Number(n.uncompressed_page_size),l,d),C={view:new DataView(y.buffer,y.byteOffset,y.byteLength),offset:0};return ve(C,o,A.num_values,G.type_length)}else throw new Error(`parquet unsupported page type: ${n.type}`)}function pt(e){const n=wn(e),t=fn[n.field_1],a=n.field_2,r=n.field_3,i=n.field_4,o=n.field_5&&{num_values:n.field_5.field_1,encoding:E0[n.field_5.field_2],definition_level_encoding:E0[n.field_5.field_3],repetition_level_encoding:E0[n.field_5.field_4],statistics:n.field_5.field_5&&{max:n.field_5.field_5.field_1,min:n.field_5.field_5.field_2,null_count:n.field_5.field_5.field_3,distinct_count:n.field_5.field_5.field_4,max_value:n.field_5.field_5.field_5,min_value:n.field_5.field_5.field_6}},G=n.field_6,u=n.field_7&&{num_values:n.field_7.field_1,encoding:E0[n.field_7.field_2],is_sorted:n.field_7.field_3},l=n.field_8&&{num_values:n.field_8.field_1,num_nulls:n.field_8.field_2,num_rows:n.field_8.field_3,encoding:E0[n.field_8.field_4],definition_levels_byte_length:n.field_8.field_5,repetition_levels_byte_length:n.field_8.field_6,is_compressed:n.field_8.field_7===void 0?!0:n.field_8.field_7,statistics:n.field_8.field_8};return{type:t,uncompressed_page_size:a,compressed_page_size:r,crc:i,data_page_header:o,index_page_header:G,dictionary_page_header:u,data_page_header_v2:l}}function ke(e,n){for(let a=0;a<n.length;a+=1e4)e.push(...n.slice(a,a+1e4))}async function yt(e,n,t){return await(t??globalThis.fetch)(e,{...n,method:"HEAD"}).then(r=>{if(!r.ok)throw new Error(`fetch head failed ${r.status}`);const i=r.headers.get("Content-Length");if(!i)throw new Error("missing content length");return parseInt(i)})}async function Ct({url:e,byteLength:n,requestInit:t,fetch:a}){if(!e)throw new Error("missing url");const r=a??globalThis.fetch;n||(n=await yt(e,t,r));let i;const o=t||{};return{byteLength:n,async slice(G,u){if(i)return i.then(g=>g.slice(G,u));const l=new Headers(o.headers),d=u===void 0?"":u-1;l.set("Range",`bytes=${G}-${d}`);const s=await r(e,{...o,headers:l});if(!s.ok||!s.body)throw new Error(`fetch failed ${s.status}`);if(s.status===200)return i=s.arrayBuffer(),i.then(g=>g.slice(G,u));if(s.status===206)return s.arrayBuffer();throw new Error(`fetch received unexpected status code ${s.status}`)}}}const vt=1<<25;function kt({metadata:e,rowStart:n=0,rowEnd:t=1/0,columns:a}){var G,u;if(!e)throw new Error("parquetPlan requires metadata");const r=[],i=[];let o=0;for(const l of e.row_groups){const d=o+Number(l.num_rows);if(d>=n&&o<t){const s=[];for(const{file_path:A,meta_data:y}of l.columns){if(A)throw new Error("parquet file_path not supported");if(!y)throw new Error("parquet column metadata is undefined");(!a||a.includes(y.path_in_schema[0]))&&s.push(En(y))}r.push({plan:s});const g=((G=s[s.length-1])==null?void 0:G.endByte)-((u=s[0])==null?void 0:u.startByte);if(!a&&g<vt)i.push({startByte:s[0].startByte,endByte:s[s.length-1].endByte});else if(s.length)ke(i,s);else if(a!=null&&a.length)throw new Error(`parquet columns not found: ${a.join(", ")}`)}o=d}return{ranges:i,groups:r}}function En({dictionary_page_offset:e,data_page_offset:n,total_compressed_size:t}){const a=e||n;return{startByte:Number(a),endByte:Number(a+t)}}function Et(e,{ranges:n}){const t=n.map(({startByte:a,endByte:r})=>e.slice(a,r));return{byteLength:e.byteLength,slice(a,r=e.byteLength){const i=n.findIndex(({startByte:o,endByte:G})=>o<=a&&r<=G);if(i<0)throw new Error(`no prefetch for range [${a}, ${r}]`);if(n[i].startByte!==a||n[i].endByte!==r){const o=a-n[i].startByte,G=r-n[i].startByte;return t[i]instanceof Promise?t[i].then(u=>u.slice(o,G)):t[i].slice(o,G)}else return t[i]}}}async function Bt(e){if(!e.file||!(e.file.byteLength>=0))throw new Error("parquetRead expected file AsyncBuffer");e.metadata??(e.metadata=await Vn(e.file));const{metadata:n,onComplete:t,rowStart:a=0,rowEnd:r}=e;if(a<0)throw new Error("parquetRead rowStart must be positive");const i=kt(e);e.file=Et(e.file,i);const o=[];let G=0;for(const u of n.row_groups){const l=Number(u.num_rows);if(G+l>=a&&(r===void 0||G<r)){const d=await It(e,u,G);if(t){const s=Math.max(a-G,0),g=r===void 0?void 0:r-G;ke(o,d.slice(s,g))}}G+=l}t&&t(o)}async function It(e,n,t){var k;const{file:a,metadata:r,columns:i,rowStart:o=0,rowEnd:G}=e;if(!r)throw new Error("parquet metadata not found");const u=Number(n.num_rows),l=Math.max(o-t,0),d=Math.min((G??1/0)-t,u),s={groupStart:t,selectStart:l,selectEnd:d},g=[],{children:A}=Pe(r.schema,[])[0],y=new Map(A.map(w=>[w.element.name,Bn(w)])),C=new Map;for(const{file_path:w,meta_data:E}of n.columns){if(w)throw new Error("parquet file_path not supported");if(!E)throw new Error("parquet column metadata is undefined");const v=E.path_in_schema[0];if(i&&!i.includes(v))continue;const{startByte:x,endByte:P}=En(E),B=P-x;if(B>1<<30){console.warn(`parquet skipping huge column "${E.path_in_schema}" ${B} bytes`);continue}const L=Promise.resolve(a.slice(x,P));g.push(L.then(f=>{const c=Pe(r.schema,E.path_in_schema),h={view:new DataView(f),offset:0},m=E.path_in_schema.join("."),p={columnName:m,type:E.type,element:c[c.length-1].element,schemaPath:c,codec:E.codec,compressors:e.compressors,utf8:e.utf8};let b=mt(h,s,p,e.onPage);if(!e.onComplete&&!e.onChunk)return;C.set(m,b),b=void 0;const M=y.get(v);if(M!=null&&M.every(S=>C.has(S))){const S=new Map(M.map(R=>[R,He(C.get(R))]));P0(S,c[1]);const U=S.get(v);if(!U)throw new Error(`parquet column data not assembled: ${v}`);b=[U],M.forEach(R=>C.delete(R)),C.set(v,b)}if(b&&e.onChunk)for(const S of b)e.onChunk({columnName:v,columnData:S,rowStart:t,rowEnd:t+S.length})}))}if(await Promise.all(g),e.onComplete){const w=A.map(P=>P.element.name).filter(P=>!i||i.includes(P)),E=i||w,v=E.map(P=>w.includes(P)?He(C.get(P)):void 0),x=new Array(d);for(let P=l;P<d;P++)if(e.rowFormat==="object"){const B={};for(let L=0;L<E.length;L++)B[E[L]]=(k=v[L])==null?void 0:k[P];x[P]=B}else x[P]=v.map(B=>B==null?void 0:B[P]);return x}return[]}function He(e){if(!e)return[];if(e.length===1)return e[0];const n=[];for(const t of e)ke(n,t);return n}function Bn(e,n=[]){if(e.children.length)for(const t of e.children)Bn(t,n);else n.push(e.path.join("."));return n}function bt(e){return new Promise((n,t)=>{Bt({rowFormat:"object",...e,onComplete:n}).catch(t)})}var St=ArrayBuffer,t0=Uint8Array,Z0=Uint16Array,Lt=Int16Array,ae=Int32Array,Ge=function(e,n,t){if(t0.prototype.slice)return t0.prototype.slice.call(e,n,t);(n==null||n<0)&&(n=0),(t==null||t>e.length)&&(t=e.length);var a=new t0(t-n);return a.set(e.subarray(n,t)),a},T0=function(e,n,t,a){if(t0.prototype.fill)return t0.prototype.fill.call(e,n,t,a);for((t==null||t<0)&&(t=0),(a==null||a>e.length)&&(a=e.length);t<a;++t)e[t]=n;return e},Mt=function(e,n,t,a){if(t0.prototype.copyWithin)return t0.prototype.copyWithin.call(e,n,t,a);for((t==null||t<0)&&(t=0),(a==null||a>e.length)&&(a=e.length);t<a;)e[n++]=e[t++]},Dt=["invalid zstd data","window size too large (>2046MB)","invalid block type","FSE accuracy too high","match distance too far back","unexpected EOF"],s0=function(e,n,t){var a=new Error(n||Dt[e]);if(a.code=e,Error.captureStackTrace&&Error.captureStackTrace(a,s0),!t)throw a;return a},Qe=function(e,n,t){for(var a=0,r=0;a<t;++a)r|=e[n++]<<(a<<3);return r},Rt=function(e,n){return(e[n]|e[n+1]<<8|e[n+2]<<16|e[n+3]<<24)>>>0},Pt=function(e,n){var t=e[0]|e[1]<<8|e[2]<<16;if(t==3126568&&e[3]==253){var a=e[4],r=a>>5&1,i=a>>2&1,o=a&3,G=a>>6;a&8&&s0(0);var u=6-r,l=o==3?4:o,d=Qe(e,u,l);u+=l;var s=G?1<<G:r,g=Qe(e,u,s)+(G==1&&256),A=g;if(!r){var y=1<<10+(e[5]>>3);A=y+(y>>3)*(e[5]&7)}A>2145386496&&s0(1);var C=new t0((n==1?g||A:n?0:A)+12);return C[0]=1,C[4]=4,C[8]=8,{b:u+s,y:0,l:0,d,w:n&&n!=1?n:C.subarray(12),e:A,o:new ae(C.buffer,0,3),u:g,c:i,m:Math.min(131072,A)}}else if((t>>4|e[3]<<20)==25481893)return Rt(e,4)+8;s0(0)},I0=function(e){for(var n=0;1<<n<=e;++n);return n-1},H0=function(e,n,t){var a=(n<<3)+4,r=(e[n]&15)+5;r>t&&s0(3);for(var i=1<<r,o=i,G=-1,u=-1,l=-1,d=i,s=new St(512+(i<<2)),g=new Lt(s,0,256),A=new Z0(s,0,256),y=new Z0(s,512,i),C=512+(i<<1),k=new t0(s,C,i),w=new t0(s,C+i);G<255&&o>0;){var E=I0(o+1),v=a>>3,x=(1<<E+1)-1,P=(e[v]|e[v+1]<<8|e[v+2]<<16)>>(a&7)&x,B=(1<<E)-1,L=x-o-1,f=P&B;if(f<L?(a+=E,P=f):(a+=E+1,P>B&&(P-=L)),g[++G]=--P,P==-1?(o+=P,k[--d]=G):o-=P,!P)do{var c=a>>3;u=(e[c]|e[c+1]<<8)>>(a&7)&3,a+=2,G+=u}while(u==3)}(G>255||o)&&s0(0);for(var h=0,m=(i>>1)+(i>>3)+3,p=i-1,b=0;b<=G;++b){var M=g[b];if(M<1){A[b]=-M;continue}for(l=0;l<M;++l){k[h]=b;do h=h+m&p;while(h>=d)}}for(h&&s0(0),l=0;l<i;++l){var S=A[k[l]]++,U=w[l]=r-I0(S);y[l]=(S<<U)-i}return[a+7>>3,{b:r,s:k,n:w,t:y}]},Nt=function(e,n){var t=0,a=-1,r=new t0(292),i=e[n],o=r.subarray(0,256),G=r.subarray(256,268),u=new Z0(r.buffer,268);if(i<128){var l=H0(e,n+1,6),d=l[0],s=l[1];n+=i;var g=d<<3,A=e[n];A||s0(0);for(var y=0,C=0,k=s.b,w=k,E=(++n<<3)-8+I0(A);E-=k,!(E<g);){var v=E>>3;if(y+=(e[v]|e[v+1]<<8)>>(E&7)&(1<<k)-1,o[++a]=s.s[y],E-=w,E<g)break;v=E>>3,C+=(e[v]|e[v+1]<<8)>>(E&7)&(1<<w)-1,o[++a]=s.s[C],k=s.n[y],y=s.t[y],w=s.n[C],C=s.t[C]}++a>255&&s0(0)}else{for(a=i-127;t<a;t+=2){var x=e[++n];o[t]=x>>4,o[t+1]=x&15}++n}var P=0;for(t=0;t<a;++t){var B=o[t];B>11&&s0(0),P+=B&&1<<B-1}var L=I0(P)+1,f=1<<L,c=f-P;for(c&c-1&&s0(0),o[a++]=I0(c)+1,t=0;t<a;++t){var B=o[t];++G[o[t]=B&&L+1-B]}var h=new t0(f<<1),m=h.subarray(0,f),p=h.subarray(f);for(u[L]=0,t=L;t>0;--t){var b=u[t];T0(p,t,b,u[t-1]=b+G[t]*(1<<L-t))}for(u[0]!=f&&s0(0),t=0;t<a;++t){var M=o[t];if(M){var S=u[M];T0(m,t,S,u[M]=S+(1<<L-M))}}return[n,{n:p,b:L,s:m}]},Tt=H0(new t0([81,16,99,140,49,198,24,99,12,33,196,24,99,102,102,134,70,146,4]),0,6)[1],Ot=H0(new t0([33,20,196,24,99,140,33,132,16,66,8,33,132,16,66,8,33,68,68,68,68,68,68,68,68,36,9]),0,6)[1],Ft=H0(new t0([32,132,16,66,102,70,68,68,68,68,36,73,2]),0,5)[1],In=function(e,n){for(var t=e.length,a=new ae(t),r=0;r<t;++r)a[r]=n,n+=1<<e[r];return a},he=new t0(new ae([0,0,0,0,16843009,50528770,134678020,202050057,269422093]).buffer,0,36),Wt=In(he,0),de=new t0(new ae([0,0,0,0,0,0,0,0,16843009,50528770,117769220,185207048,252579084,16]).buffer,0,53),Ht=In(de,3),N0=function(e,n,t){var a=e.length,r=n.length,i=e[a-1],o=(1<<t.b)-1,G=-t.b;i||s0(0);for(var u=0,l=t.b,d=(a<<3)-8+I0(i)-l,s=-1;d>G&&s<r;){var g=d>>3,A=(e[g]|e[g+1]<<8|e[g+2]<<16)>>(d&7);u=(u<<l|A)&o,n[++s]=t.s[u],d-=l=t.n[u]}(d!=G||s+1!=r)&&s0(0)},Qt=function(e,n,t){var a=6,r=n.length,i=r+3>>2,o=i<<1,G=i+o;N0(e.subarray(a,a+=e[0]|e[1]<<8),n.subarray(0,i),t),N0(e.subarray(a,a+=e[2]|e[3]<<8),n.subarray(i,o),t),N0(e.subarray(a,a+=e[4]|e[5]<<8),n.subarray(o,G),t),N0(e.subarray(a),n.subarray(G),t)},xt=function(e,n,t){var a,r=n.b,i=e[r],o=i>>1&3;n.l=i&1;var G=i>>3|e[r+1]<<5|e[r+2]<<13,u=(r+=3)+G;if(o==1)return r>=e.length?void 0:(n.b=r+1,t?(T0(t,e[r],n.y,n.y+=G),t):T0(new t0(G),e[r]));if(!(u>e.length)){if(o==0)return n.b=u,t?(t.set(e.subarray(r,u),n.y),n.y+=G,t):Ge(e,r,u);if(o==2){var l=e[r],d=l&3,s=l>>2&3,g=l>>4,A=0,y=0;d<2?s&1?g|=e[++r]<<4|(s&2&&e[++r]<<12):g=l>>3:(y=s,s<2?(g|=(e[++r]&63)<<4,A=e[r]>>6|e[++r]<<2):s==2?(g|=e[++r]<<4|(e[++r]&3)<<12,A=e[r]>>2|e[++r]<<6):(g|=e[++r]<<4|(e[++r]&63)<<12,A=e[r]>>6|e[++r]<<2|e[++r]<<10)),++r;var C=t?t.subarray(n.y,n.y+n.m):new t0(n.m),k=C.length-g;if(d==0)C.set(e.subarray(r,r+=g),k);else if(d==1)T0(C,e[r++],k);else{var w=n.h;if(d==2){var E=Nt(e,r);A+=r-(r=E[0]),n.h=w=E[1]}else w||s0(0);(y?Qt:N0)(e.subarray(r,r+=A),C.subarray(k),w)}var v=e[r++];if(v){v==255?v=(e[r++]|e[r++]<<8)+32512:v>127&&(v=v-128<<8|e[r++]);var x=e[r++];x&3&&s0(0);for(var P=[Ot,Ft,Tt],B=2;B>-1;--B){var L=x>>(B<<1)+2&3;if(L==1){var f=new t0([0,0,e[r++]]);P[B]={s:f.subarray(2,3),n:f.subarray(0,1),t:new Z0(f.buffer,0,1),b:0}}else L==2?(a=H0(e,r,9-(B&1)),r=a[0],P[B]=a[1]):L==3&&(n.t||s0(0),P[B]=n.t[B])}var c=n.t=P,h=c[0],m=c[1],p=c[2],b=e[u-1];b||s0(0);var M=(u<<3)-8+I0(b)-p.b,S=M>>3,U=0,R=(e[S]|e[S+1]<<8)>>(M&7)&(1<<p.b)-1;S=(M-=m.b)>>3;var J=(e[S]|e[S+1]<<8)>>(M&7)&(1<<m.b)-1;S=(M-=h.b)>>3;var N=(e[S]|e[S+1]<<8)>>(M&7)&(1<<h.b)-1;for(++v;--v;){var $=p.s[R],T=p.n[R],W=h.s[N],D=h.n[N],n0=m.s[J],e0=m.n[J];S=(M-=n0)>>3;var r0=1<<n0,a0=r0+((e[S]|e[S+1]<<8|e[S+2]<<16|e[S+3]<<24)>>>(M&7)&r0-1);S=(M-=de[W])>>3;var F=Ht[W]+((e[S]|e[S+1]<<8|e[S+2]<<16)>>(M&7)&(1<<de[W])-1);S=(M-=he[$])>>3;var Q=Wt[$]+((e[S]|e[S+1]<<8|e[S+2]<<16)>>(M&7)&(1<<he[$])-1);if(S=(M-=T)>>3,R=p.t[R]+((e[S]|e[S+1]<<8)>>(M&7)&(1<<T)-1),S=(M-=D)>>3,N=h.t[N]+((e[S]|e[S+1]<<8)>>(M&7)&(1<<D)-1),S=(M-=e0)>>3,J=m.t[J]+((e[S]|e[S+1]<<8)>>(M&7)&(1<<e0)-1),a0>3)n.o[2]=n.o[1],n.o[1]=n.o[0],n.o[0]=a0-=3;else{var j=a0-(Q!=0);j?(a0=j==3?n.o[0]-1:n.o[j],j>1&&(n.o[2]=n.o[1]),n.o[1]=n.o[0],n.o[0]=a0):a0=n.o[0]}for(var B=0;B<Q;++B)C[U+B]=C[k+B];U+=Q,k+=Q;var O=U-a0;if(O<0){var q=-O,i0=n.e+O;q>F&&(q=F);for(var B=0;B<q;++B)C[U+B]=n.w[i0+B];U+=q,F-=q,O=0}for(var B=0;B<F;++B)C[U+B]=C[O+B];U+=F}if(U!=k)for(;k<C.length;)C[U++]=C[k++];else U=C.length;t?n.y+=U:C=Ge(C,0,U)}else if(t){if(n.y+=g,k)for(var B=0;B<g;++B)C[B]=C[k+B]}else k&&(C=Ge(C,k));return n.b=u,C}s0(2)}},Ut=function(e,n){if(e.length==1)return e[0];for(var t=new t0(n),a=0,r=0;a<e.length;++a){var i=e[a];t.set(i,r),r+=i.length}return t};function Jt(e,n){for(var t=[],a=+!n,r=0,i=0;e.length;){var o=Pt(e,a||n);if(typeof o=="object"){for(a?(n=null,o.w.length==o.u&&(t.push(n=o.w),i+=o.u)):(t.push(n),o.e=0);!o.l;){var G=xt(e,o,n);G||s0(5),n?o.e=o.y:(t.push(G),i+=G.length,Mt(o.w,0,G.length),o.w.set(G,o.w.length-G.length))}r=o.b+o.c*4}else r=o;e=e.subarray(r)}return Ut(t,i)}function Kt(){const e=qt();return(n,t)=>{const{memory:a,uncompress:r}=e.exports,i=68e3,o=i+n.byteLength,G=i+n.byteLength+t;if(a.buffer.byteLength<G){const s=a.buffer.byteLength/65536,A=Math.ceil(G/65536)-s;a.grow(A)}const u=new Uint8Array(a.buffer);u.set(n,i);const l=r(i,n.byteLength,o);if(l===-1)throw new Error("invalid snappy length header");if(l===-2)throw new Error("missing eof marker");if(l===-3)throw new Error("premature end of input");if(l)throw new Error(`failed to uncompress data ${l}`);return u.slice(o,o+t)}}function qt(){const e=atob(Yt),n=new Uint8Array(e.length);for(let a=0;a<e.length;a+=1)n[a]=e.charCodeAt(a);const t=new WebAssembly.Module(n);return new WebAssembly.Instance(t)}const Yt="AGFzbQEAAAABEANgAABgA39/fwF/YAF/AX8DBgUAAQEBAgUDAQACBj8KfwFBoIwEC38AQYAIC38AQaAMC38AQaAMC38AQaCMBAt/AEGACAt/AEGgjAQLfwBBgIAIC38AQQALfwBBAQsHwQEOBm1lbW9yeQIAEV9fd2FzbV9jYWxsX2N0b3JzAAAGbWVtY3B5AAEHbWVtbW92ZQACCnVuY29tcHJlc3MAAwxfX2Rzb19oYW5kbGUDAQpfX2RhdGFfZW5kAwILX19zdGFja19sb3cDAwxfX3N0YWNrX2hpZ2gDBA1fX2dsb2JhbF9iYXNlAwULX19oZWFwX2Jhc2UDBgpfX2hlYXBfZW5kAwcNX19tZW1vcnlfYmFzZQMIDF9fdGFibGVfYmFzZQMJCuASBQIAC8sBAQN/AkAgAkUNAAJAAkAgAkEHcSIDDQAgACEEIAIhBQwBCyAAIQQgAiEFA0AgBCABLQAAOgAAIARBAWohBCABQQFqIQEgBUF/aiEFIANBf2oiAw0ACwsgAkEISQ0AA0AgBCABLQAAOgAAIAQgAS0AAToAASAEIAEtAAI6AAIgBCABLQADOgADIAQgAS0ABDoABCAEIAEtAAU6AAUgBCABLQAGOgAGIAQgAS0ABzoAByAEQQhqIQQgAUEIaiEBIAVBeGoiBQ0ACwsgAAugAwEEfwJAIAAgAUYNAAJAAkAgACABSQ0AIAEgAmoiAyAASw0BCyACRQ0BAkACQCACQQdxIgMNACAAIQQgAiEFDAELIAAhBCACIQUDQCAEIAEtAAA6AAAgBEEBaiEEIAFBAWohASAFQX9qIQUgA0F/aiIDDQALCyACQQhJDQEDQCAEIAEtAAA6AAAgBCABLQABOgABIAQgAS0AAjoAAiAEIAEtAAM6AAMgBCABLQAEOgAEIAQgAS0ABToABSAEIAEtAAY6AAYgBCABLQAHOgAHIARBCGohBCABQQhqIQEgBUF4aiIFDQAMAgsLIAJFDQACQAJAIAJBA3EiBA0AIAAgAmohBiACIQUMAQsgAiEFA0AgBUF/aiIFIABqIgYgBSABaiIDLQAAOgAAIARBf2oiBA0ACwsgAkEESQ0AIAZBfGohASADQXxqIQQDQCABQQNqIARBA2otAAA6AAAgAUECaiAEQQJqLQAAOgAAIAFBAWogBEEBai0AADoAACABIAQtAAA6AAAgAUF8aiEBIARBfGohBCAFQXxqIgUNAAsLIAALswoBCX8jgICAgABBIGsiAySAgICAACADQQlqQgA3AAAgA0IANwIEIAMgA0EYajYCAEF/IQQCQCABRQ0AIAMgAUF/aiIFNgIcIAMgAEEBajYCGCAALAAAIgZB/wBxIQcCQCAGQX9KDQAgBUUNASADIAFBfmoiBTYCHCADIABBAmo2AhggACwAASIGQf8AcUEHdCAHciEHQX8hBCAGQX9KDQAgBUUNASADIAFBfWoiBTYCHCADIABBA2o2AhggACwAAiIGQf8AcUEOdCAHciEHQX8hBCAGQX9KDQAgBUUNASADIAFBfGoiBTYCHCADIABBBGo2AhggACwAAyIGQf8AcUEVdCAHciEHQX8hBCAGQX9KDQAgBUUNASADIAFBe2o2AhwgAyAAQQVqNgIYIAAsAAQiAUEASA0BIAFBHHQgB3IhBwsgAiAHaiEIAkACQCADEISAgIAADQAgAiEADAELIAMoAgQhASACIQADQAJAIAMoAgggAWtBBEoNACADIAE2AgQgAxCEgICAAEUNAiADKAIEIQELIAFBAWohBQJAAkAgAS0AACIGQQNxDQAgCCAAayEJIAMoAggiCiAFayEEIAZBAnYiC0EBaiEHAkAgBkE/Sw0AIARBEEkNACAJQRBIDQAgACABKAIBNgIAIAAgASgCBTYCBCAAIAEoAgk2AgggACABKAINNgIMIAAgB2ohACADKAIIIAUgB2oiAWtBBEoNAyADIAE2AgQgAxCEgICAAEUNBAwCCwJAAkAgBkHwAU8NACAFIQYMAQsgCiAFIAtBRWoiAWoiBmshBCABQQJ0QYCIgIAAaigCACAFKAIAcUEBaiEHCwJAIAcgBE0NAANAIAggAGsgBEkNBSAAIAYgBBCBgICAACEAIAMoAgAiASABKAIAIgkgAygCDCIFaiIGNgIAIAFBBGoiASABKAIAIgogBWsiATYCACADIAE2AgwgACAEaiEAIAFFDQUgAyAJIApqNgIIIAcgBGshByABIQQgByABSw0ACyAIIABrIQkLIAkgB0kNAyAAIAYgBxCBgICAACAHaiEAIAMoAgggBiAHaiIBa0EESg0CIAMgATYCBCADEISAgIAADQEMAwsgACACayAGQQF0QaCIgIAAai8BACIBQQt2IgpBAnRBgIiAgABqKAIAIAUoAgBxIAFBgA5xaiIHQX9qTQ0CIAggAGshBAJAAkAgAUH/AXEiCUEQSw0AIAdBCEkNACAEQRBJDQAgACAAIAdrIgEoAgA2AgAgACABKAIENgIEIAAgASgCCDYCCCAAIAFBDGooAgA2AgwMAQsCQAJAAkAgBCAJQQpqSQ0AIAAgB2shBCAAIQEgCSEGIAdBB0wNAQwCCyAEIAlJDQUgCUEBaiEEQQAgB2shByAAIQEDQCABIAEgB2otAAA6AAAgAUEBaiEBIARBf2oiBEEBSw0ADAMLCwNAIAEgBCgCADYCACABIAQoAgQ2AgQgBiAHayEGIAEgB2oiASAEayIHQQhIDQALCyAGQQFIDQAgBkEIaiEHA0AgASAEKAIANgIAIAEgBCgCBDYCBCABQQhqIQEgBEEIaiEEIAdBeGoiB0EISw0ACwsgACAJaiEAIAMoAgggBSAKaiIBa0EESg0BIAMgATYCBCADEISAgIAARQ0CCyADKAIEIQEMAAsLIAMoAgAiASABKAIEIAMoAgwiBGs2AgQgASAEIAEoAgBqNgIAAkAgAy0AEA0AQX4hBAwBC0EAQX0gCCAARhshBAsgA0EgaiSAgICAACAEC7YDAQd/AkAgACgCBCIBIAAoAggiAkcNACAAKAIAIgIgAigCACIDIAAoAgwiBGoiATYCACACQQRqIgIgAigCACICIARrIgU2AgAgACAFNgIMAkAgAiAERw0AIABBAToAEEEADwsgACADIAJqIgI2AggLAkACQAJAIAIgAWsiAiABLQAAQQF0QaCIgIAAai8BAEELdkEBaiIFTw0AIABBEWogASACEIKAgIAAIQYgACgCDCEEQQAhByAAQQA2AgwgACgCACIBIAEoAgQgBGs2AgQgASAEIAEoAgBqIgM2AgADQCABQQRqKAIAIgFFDQMgBiACaiADIAUgAmsiBCABIAQgAUkbIgQQgYCAgAAaIAAoAgAiASABKAIEIARrNgIEIAEgASgCACAEaiIDNgIAIAQgAmoiAiAFSQ0ACyAAIAY2AgQgACAGIAVqNgIIDAELAkAgAkEESw0AIAAgAEERaiABIAIQgoCAgAAiASACajYCCCAAIAE2AgQgACgCDCECIABBADYCDCAAKAIAIgEgASgCBCACazYCBCABIAIgASgCAGo2AgAMAQsgACABNgIEC0EBIQcLIAcLC6gEAQBBgAgLoAQAAAAA/wAAAP//AAD///8A/////wAAAAAAAAAAAAAAAAEABAgBEAEgAgAFCAIQAiADAAYIAxADIAQABwgEEAQgBQAICAUQBSAGAAkIBhAGIAcACggHEAcgCAALCAgQCCAJAAQJCRAJIAoABQkKEAogCwAGCQsQCyAMAAcJDBAMIA0ACAkNEA0gDgAJCQ4QDiAPAAoJDxAPIBAACwkQEBAgEQAEChEQESASAAUKEhASIBMABgoTEBMgFAAHChQQFCAVAAgKFRAVIBYACQoWEBYgFwAKChcQFyAYAAsKGBAYIBkABAsZEBkgGgAFCxoQGiAbAAYLGxAbIBwABwscEBwgHQAICx0QHSAeAAkLHhAeIB8ACgsfEB8gIAALCyAQICAhAAQMIRAhICIABQwiECIgIwAGDCMQIyAkAAcMJBAkICUACAwlECUgJgAJDCYQJiAnAAoMJxAnICgACwwoECggKQAEDSkQKSAqAAUNKhAqICsABg0rECsgLAAHDSwQLCAtAAgNLRAtIC4ACQ0uEC4gLwAKDS8QLyAwAAsNMBAwIDEABA4xEDEgMgAFDjIQMiAzAAYOMxAzIDQABw40EDQgNQAIDjUQNSA2AAkONhA2IDcACg43EDcgOAALDjgQOCA5AAQPORA5IDoABQ86EDogOwAGDzsQOyA8AAcPPBA8IAEICA89ED0gARAJDz4QPiABGAoPPxA/IAEgCw9AEEAgAGQEbmFtZQE9BQARX193YXNtX2NhbGxfY3RvcnMBBm1lbWNweQIHbWVtbW92ZQMKdW5jb21wcmVzcwQKcmVmaWxsX3RhZwcSAQAPX19zdGFja19wb2ludGVyCQoBAAcucm9kYXRhADIJcHJvZHVjZXJzAQxwcm9jZXNzZWQtYnkBDFVidW50dSBjbGFuZwsxNi4wLjYgKDE1KQAsD3RhcmdldF9mZWF0dXJlcwIrD211dGFibGUtZ2xvYmFscysIc2lnbi1leHQ=";function Ee([e,n]){return{offset:e,nbits:n}}[[1,2],[5,2],[9,2],[13,2],[17,3],[25,3],[33,3],[41,3],[49,4],[65,4],[81,4],[97,4],[113,5],[145,5],[177,5],[209,5],[241,6],[305,6],[369,7],[497,8],[753,9],[1265,10],[2289,11],[4337,12],[8433,13],[16625,24]].map(Ee);[[0,0],[1,0],[2,0],[3,0],[4,0],[5,0],[6,1],[8,1],[10,2],[14,2],[18,3],[26,3],[34,4],[50,4],[66,5],[98,5],[130,6],[194,7],[322,8],[578,9],[1090,10],[2114,12],[6210,14],[22594,24]].map(Ee);[[2,0],[3,0],[4,0],[5,0],[6,0],[7,0],[8,0],[9,0],[10,1],[12,1],[14,2],[18,2],[22,3],[30,3],[38,4],[54,4],[70,5],[102,5],[134,6],[198,7],[326,8],[582,9],[1094,10],[2118,24]].map(Ee);const zt=new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0,0]),jt=new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,0,0]);function bn(e,n){const t=new Uint16Array(31);for(let r=0;r<31;r++)t[r]=n+=1<<e[r-1];const a=new Int32Array(t[30]);for(let r=1;r<30;r++)for(let i=t[r];i<t[r+1];++i)a[i]=i-t[r]<<5|r;return{base:t,rev:a}}const{base:Vt,rev:$t}=bn(zt,2);Vt[28]=258;$t[258]=28;bn(jt,0);const Xt=new Uint16Array(32768);for(let e=0;e<32768;e++){let n=(e&43690)>>1|(e&21845)<<1;n=(n&52428)>>2|(n&13107)<<2,n=(n&61680)>>4|(n&3855)<<4,Xt[e]=((n&65280)>>8|(n&255)<<8)>>1}const ie=new Uint8Array(288);for(let e=0;e<144;e++)ie[e]=8;for(let e=144;e<256;e++)ie[e]=9;for(let e=256;e<280;e++)ie[e]=7;for(let e=280;e<288;e++)ie[e]=8;const Zt=new Uint8Array(32);for(let e=0;e<32;e++)Zt[e]=5;const I=0,xe=1,er=2,nr=3,tr=4,rr=5,ar=6,ir=7,or=8,Gr=9,o0=10,u0=11,sr=12,lr=13,ur=14,fr=15,cr=16,hr=17,dr=18,Ar=20;function _(e,n,t){this.prefix=new Uint8Array(e.length),this.transform=n,this.suffix=new Uint8Array(t.length);for(let a=0;a<e.length;a++)this.prefix[a]=e.charCodeAt(a);for(let a=0;a<t.length;a++)this.suffix[a]=t.charCodeAt(a)}new _("",I,""),new _("",I," "),new _(" ",I," "),new _("",sr,""),new _("",o0," "),new _("",I," the "),new _(" ",I,""),new _("s ",I," "),new _("",I," of "),new _("",o0,""),new _("",I," and "),new _("",lr,""),new _("",xe,""),new _(", ",I," "),new _("",I,", "),new _(" ",o0," "),new _("",I," in "),new _("",I," to "),new _("e ",I," "),new _("",I,'"'),new _("",I,"."),new _("",I,'">'),new _("",I,`
`),new _("",nr,""),new _("",I,"]"),new _("",I," for "),new _("",ur,""),new _("",er,""),new _("",I," a "),new _("",I," that "),new _(" ",o0,""),new _("",I,". "),new _(".",I,""),new _(" ",I,", "),new _("",fr,""),new _("",I," with "),new _("",I,"'"),new _("",I," from "),new _("",I," by "),new _("",cr,""),new _("",hr,""),new _(" the ",I,""),new _("",tr,""),new _("",I,". The "),new _("",u0,""),new _("",I," on "),new _("",I," as "),new _("",I," is "),new _("",ir,""),new _("",xe,"ing "),new _("",I,`
	`),new _("",I,":"),new _(" ",I,". "),new _("",I,"ed "),new _("",Ar,""),new _("",dr,""),new _("",ar,""),new _("",I,"("),new _("",o0,", "),new _("",or,""),new _("",I," at "),new _("",I,"ly "),new _(" the ",I," of "),new _("",rr,""),new _("",Gr,""),new _(" ",o0,", "),new _("",o0,'"'),new _(".",I,"("),new _("",u0," "),new _("",o0,'">'),new _("",I,'="'),new _(" ",I,"."),new _(".com/",I,""),new _(" the ",I," of the "),new _("",o0,"'"),new _("",I,". This "),new _("",I,","),new _(".",I," "),new _("",o0,"("),new _("",o0,"."),new _("",I," not "),new _(" ",I,'="'),new _("",I,"er "),new _(" ",u0," "),new _("",I,"al "),new _(" ",u0,""),new _("",I,"='"),new _("",u0,'"'),new _("",o0,". "),new _(" ",I,"("),new _("",I,"ful "),new _(" ",o0,". "),new _("",I,"ive "),new _("",I,"less "),new _("",u0,"'"),new _("",I,"est "),new _(" ",o0,"."),new _("",u0,'">'),new _(" ",I,"='"),new _("",o0,","),new _("",I,"ize "),new _("",u0,"."),new _("Â ",I,""),new _(" ",I,","),new _("",o0,'="'),new _("",u0,'="'),new _("",I,"ous "),new _("",u0,", "),new _("",o0,"='"),new _(" ",o0,","),new _(" ",u0,'="'),new _(" ",u0,", "),new _("",u0,","),new _("",u0,"("),new _("",u0,". "),new _(" ",u0,"."),new _("",u0,"='"),new _(" ",u0,". "),new _(" ",o0,'="'),new _(" ",u0,"='"),new _(" ",o0,"='");const _r={SNAPPY:Kt(),ZSTD:e=>Jt(e)};var Ae,G0,se,Ue,_e=0,Sn=[],f0=V,Je=f0.__b,Ke=f0.__r,qe=f0.diffed,Ye=f0.__c,ze=f0.unmount,je=f0.__;function gr(e,n){f0.__h&&f0.__h(G0,e,_e||n),_e=0;var t=G0.__H||(G0.__H={__:[],__h:[]});return e>=t.__.length&&t.__.push({}),t.__[e]}function g0(e){return _e=1,wr(Ln,e)}function wr(e,n,t){var a=gr(Ae++,2);if(a.t=e,!a.__c&&(a.__=[Ln(void 0,n),function(G){var u=a.__N?a.__N[0]:a.__[0],l=a.t(u,G);u!==l&&(a.__N=[l,a.__[1]],a.__c.setState({}))}],a.__c=G0,!G0.__f)){var r=function(G,u,l){if(!a.__c.__H)return!0;var d=a.__c.__H.__.filter(function(g){return!!g.__c});if(d.every(function(g){return!g.__N}))return!i||i.call(this,G,u,l);var s=a.__c.props!==G;return d.forEach(function(g){if(g.__N){var A=g.__[0];g.__=g.__N,g.__N=void 0,A!==g.__[0]&&(s=!0)}}),i&&i.call(this,G,u,l)||s};G0.__f=!0;var i=G0.shouldComponentUpdate,o=G0.componentWillUpdate;G0.componentWillUpdate=function(G,u,l){if(this.__e){var d=i;i=void 0,r(G,u,l),i=d}o&&o.call(this,G,u,l)},G0.shouldComponentUpdate=r}return a.__N||a.__}function mr(){for(var e;e=Sn.shift();)if(e.__P&&e.__H)try{e.__H.__h.forEach(j0),e.__H.__h.forEach(ge),e.__H.__h=[]}catch(n){e.__H.__h=[],f0.__e(n,e.__v)}}f0.__b=function(e){G0=null,Je&&Je(e)},f0.__=function(e,n){e&&n.__k&&n.__k.__m&&(e.__m=n.__k.__m),je&&je(e,n)},f0.__r=function(e){Ke&&Ke(e),Ae=0;var n=(G0=e.__c).__H;n&&(se===G0?(n.__h=[],G0.__h=[],n.__.forEach(function(t){t.__N&&(t.__=t.__N),t.u=t.__N=void 0})):(n.__h.forEach(j0),n.__h.forEach(ge),n.__h=[],Ae=0)),se=G0},f0.diffed=function(e){qe&&qe(e);var n=e.__c;n&&n.__H&&(n.__H.__h.length&&(Sn.push(n)!==1&&Ue===f0.requestAnimationFrame||((Ue=f0.requestAnimationFrame)||pr)(mr)),n.__H.__.forEach(function(t){t.u&&(t.__H=t.u),t.u=void 0})),se=G0=null},f0.__c=function(e,n){n.some(function(t){try{t.__h.forEach(j0),t.__h=t.__h.filter(function(a){return!a.__||ge(a)})}catch(a){n.some(function(r){r.__h&&(r.__h=[])}),n=[],f0.__e(a,t.__v)}}),Ye&&Ye(e,n)},f0.unmount=function(e){ze&&ze(e);var n,t=e.__c;t&&t.__H&&(t.__H.__.forEach(function(a){try{j0(a)}catch(r){n=r}}),t.__H=void 0,n&&f0.__e(n,t.__v))};var Ve=typeof requestAnimationFrame=="function";function pr(e){var n,t=function(){clearTimeout(a),Ve&&cancelAnimationFrame(n),setTimeout(e)},a=setTimeout(t,100);Ve&&(n=requestAnimationFrame(t))}function j0(e){var n=G0,t=e.__c;typeof t=="function"&&(e.__c=void 0,t()),G0=n}function ge(e){var n=G0;e.__c=e.__(),G0=n}function Ln(e,n){return typeof n=="function"?n(e):n}const $e=["upgrade","in.upgrade_name","applicability","weight","in.comstock_building_type_group","in.county_name","in.floor_area_category","in.hvac_category","in.interior_lighting_generation","in.state_name","out.site_energy.total.energy_consumption_intensity..kwh_per_ft2","calc.segment","calc.weighted.emissions.total_with_cambium_mid_case_15y..co2e_mmt","calc.weighted.emissions.total_with_egrid..co2e_mmt","calc.weighted.enduse_group.district_cooling.hvac.energy_consumption..tbtu","calc.weighted.enduse_group.district_heating.hvac.energy_consumption..tbtu","calc.weighted.enduse_group.district_heating.water_systems.energy_consumption..tbtu","calc.weighted.enduse_group.electricity.hvac.energy_consumption..tbtu","calc.weighted.enduse_group.electricity.interior_equipment.energy_consumption..tbtu","calc.weighted.enduse_group.electricity.lighting.energy_consumption..tbtu","calc.weighted.enduse_group.electricity.refrigeration.energy_consumption..tbtu","calc.weighted.enduse_group.electricity.water_systems.energy_consumption..tbtu","calc.weighted.enduse_group.natural_gas.hvac.energy_consumption..tbtu","calc.weighted.enduse_group.natural_gas.interior_equipment.energy_consumption..tbtu","calc.weighted.enduse_group.natural_gas.water_systems.energy_consumption..tbtu","calc.weighted.enduse_group.other_fuel.hvac.energy_consumption..tbtu","calc.weighted.enduse_group.other_fuel.water_systems.energy_consumption..tbtu","calc.weighted.enduse_group.site_energy.hvac.energy_consumption..tbtu","calc.weighted.enduse_group.site_energy.interior_equipment.energy_consumption..tbtu","calc.weighted.enduse_group.site_energy.lighting.energy_consumption..tbtu","calc.weighted.enduse_group.site_energy.refrigeration.energy_consumption..tbtu","calc.weighted.enduse_group.site_energy.water_systems.energy_consumption..tbtu","calc.weighted.site_energy.total.energy_consumption..tbtu","calc.weighted.sqft..ft2"],yr=Array.from({length:39},(e,n)=>`upgrade${`${n+1}`.padStart(2,"0")}`);var V0={exports:{}};var Cr=V0.exports,Xe;function vr(){return Xe||(Xe=1,function(e,n){((t,a)=>{e.exports=a()})(Cr,function t(){var a=typeof self<"u"?self:typeof window<"u"?window:a!==void 0?a:{},r,i=!a.document&&!!a.postMessage,o=a.IS_PAPA_WORKER||!1,G={},u=0,l={};function d(f){this._handle=null,this._finished=!1,this._completed=!1,this._halted=!1,this._input=null,this._baseIndex=0,this._partialLine="",this._rowCount=0,this._start=0,this._nextChunk=null,this.isFirstChunk=!0,this._completeResults={data:[],errors:[],meta:{}},(function(c){var h=P(c);h.chunkSize=parseInt(h.chunkSize),c.step||c.chunk||(h.chunkSize=null),this._handle=new C(h),(this._handle.streamer=this)._config=h}).call(this,f),this.parseChunk=function(c,h){var m=parseInt(this._config.skipFirstNLines)||0;if(this.isFirstChunk&&0<m){let b=this._config.newline;b||(p=this._config.quoteChar||'"',b=this._handle.guessLineEndings(c,p)),c=[...c.split(b).slice(m)].join(b)}this.isFirstChunk&&L(this._config.beforeFirstChunk)&&(p=this._config.beforeFirstChunk(c))!==void 0&&(c=p),this.isFirstChunk=!1,this._halted=!1;var m=this._partialLine+c,p=(this._partialLine="",this._handle.parse(m,this._baseIndex,!this._finished));if(!this._handle.paused()&&!this._handle.aborted()){if(c=p.meta.cursor,m=(this._finished||(this._partialLine=m.substring(c-this._baseIndex),this._baseIndex=c),p&&p.data&&(this._rowCount+=p.data.length),this._finished||this._config.preview&&this._rowCount>=this._config.preview),o)a.postMessage({results:p,workerId:l.WORKER_ID,finished:m});else if(L(this._config.chunk)&&!h){if(this._config.chunk(p,this._handle),this._handle.paused()||this._handle.aborted())return void(this._halted=!0);this._completeResults=p=void 0}return this._config.step||this._config.chunk||(this._completeResults.data=this._completeResults.data.concat(p.data),this._completeResults.errors=this._completeResults.errors.concat(p.errors),this._completeResults.meta=p.meta),this._completed||!m||!L(this._config.complete)||p&&p.meta.aborted||(this._config.complete(this._completeResults,this._input),this._completed=!0),m||p&&p.meta.paused||this._nextChunk(),p}this._halted=!0},this._sendError=function(c){L(this._config.error)?this._config.error(c):o&&this._config.error&&a.postMessage({workerId:l.WORKER_ID,error:c,finished:!1})}}function s(f){var c;(f=f||{}).chunkSize||(f.chunkSize=l.RemoteChunkSize),d.call(this,f),this._nextChunk=i?function(){this._readChunk(),this._chunkLoaded()}:function(){this._readChunk()},this.stream=function(h){this._input=h,this._nextChunk()},this._readChunk=function(){if(this._finished)this._chunkLoaded();else{if(c=new XMLHttpRequest,this._config.withCredentials&&(c.withCredentials=this._config.withCredentials),i||(c.onload=B(this._chunkLoaded,this),c.onerror=B(this._chunkError,this)),c.open(this._config.downloadRequestBody?"POST":"GET",this._input,!i),this._config.downloadRequestHeaders){var h,m=this._config.downloadRequestHeaders;for(h in m)c.setRequestHeader(h,m[h])}var p;this._config.chunkSize&&(p=this._start+this._config.chunkSize-1,c.setRequestHeader("Range","bytes="+this._start+"-"+p));try{c.send(this._config.downloadRequestBody)}catch(b){this._chunkError(b.message)}i&&c.status===0&&this._chunkError()}},this._chunkLoaded=function(){c.readyState===4&&(c.status<200||400<=c.status?this._chunkError():(this._start+=this._config.chunkSize||c.responseText.length,this._finished=!this._config.chunkSize||this._start>=(h=>(h=h.getResponseHeader("Content-Range"))!==null?parseInt(h.substring(h.lastIndexOf("/")+1)):-1)(c),this.parseChunk(c.responseText)))},this._chunkError=function(h){h=c.statusText||h,this._sendError(new Error(h))}}function g(f){(f=f||{}).chunkSize||(f.chunkSize=l.LocalChunkSize),d.call(this,f);var c,h,m=typeof FileReader<"u";this.stream=function(p){this._input=p,h=p.slice||p.webkitSlice||p.mozSlice,m?((c=new FileReader).onload=B(this._chunkLoaded,this),c.onerror=B(this._chunkError,this)):c=new FileReaderSync,this._nextChunk()},this._nextChunk=function(){this._finished||this._config.preview&&!(this._rowCount<this._config.preview)||this._readChunk()},this._readChunk=function(){var p=this._input,b=(this._config.chunkSize&&(b=Math.min(this._start+this._config.chunkSize,this._input.size),p=h.call(p,this._start,b)),c.readAsText(p,this._config.encoding));m||this._chunkLoaded({target:{result:b}})},this._chunkLoaded=function(p){this._start+=this._config.chunkSize,this._finished=!this._config.chunkSize||this._start>=this._input.size,this.parseChunk(p.target.result)},this._chunkError=function(){this._sendError(c.error)}}function A(f){var c;d.call(this,f=f||{}),this.stream=function(h){return c=h,this._nextChunk()},this._nextChunk=function(){var h,m;if(!this._finished)return h=this._config.chunkSize,c=h?(m=c.substring(0,h),c.substring(h)):(m=c,""),this._finished=!c,this.parseChunk(m)}}function y(f){d.call(this,f=f||{});var c=[],h=!0,m=!1;this.pause=function(){d.prototype.pause.apply(this,arguments),this._input.pause()},this.resume=function(){d.prototype.resume.apply(this,arguments),this._input.resume()},this.stream=function(p){this._input=p,this._input.on("data",this._streamData),this._input.on("end",this._streamEnd),this._input.on("error",this._streamError)},this._checkIsFinished=function(){m&&c.length===1&&(this._finished=!0)},this._nextChunk=function(){this._checkIsFinished(),c.length?this.parseChunk(c.shift()):h=!0},this._streamData=B(function(p){try{c.push(typeof p=="string"?p:p.toString(this._config.encoding)),h&&(h=!1,this._checkIsFinished(),this.parseChunk(c.shift()))}catch(b){this._streamError(b)}},this),this._streamError=B(function(p){this._streamCleanUp(),this._sendError(p)},this),this._streamEnd=B(function(){this._streamCleanUp(),m=!0,this._streamData("")},this),this._streamCleanUp=B(function(){this._input.removeListener("data",this._streamData),this._input.removeListener("end",this._streamEnd),this._input.removeListener("error",this._streamError)},this)}function C(f){var c,h,m,p,b=Math.pow(2,53),M=-b,S=/^\s*-?(\d+\.?|\.\d+|\d+\.\d+)([eE][-+]?\d+)?\s*$/,U=/^((\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z)))$/,R=this,J=0,N=0,$=!1,T=!1,W=[],D={data:[],errors:[],meta:{}};function n0(F){return f.skipEmptyLines==="greedy"?F.join("").trim()==="":F.length===1&&F[0].length===0}function e0(){if(D&&m&&(a0("Delimiter","UndetectableDelimiter","Unable to auto-detect delimiting character; defaulted to '"+l.DefaultDelimiter+"'"),m=!1),f.skipEmptyLines&&(D.data=D.data.filter(function(q){return!n0(q)})),r0()){let q=function(i0,X){L(f.transformHeader)&&(i0=f.transformHeader(i0,X)),W.push(i0)};var O=q;if(D)if(Array.isArray(D.data[0])){for(var F=0;r0()&&F<D.data.length;F++)D.data[F].forEach(q);D.data.splice(0,1)}else D.data.forEach(q)}function Q(q,i0){for(var X=f.header?{}:[],z=0;z<q.length;z++){var H=z,h0=q[z],h0=((Y,Z)=>(l0=>(f.dynamicTypingFunction&&f.dynamicTyping[l0]===void 0&&(f.dynamicTyping[l0]=f.dynamicTypingFunction(l0)),(f.dynamicTyping[l0]||f.dynamicTyping)===!0))(Y)?Z==="true"||Z==="TRUE"||Z!=="false"&&Z!=="FALSE"&&((l0=>{if(S.test(l0)&&(l0=parseFloat(l0),M<l0&&l0<b))return 1})(Z)?parseFloat(Z):U.test(Z)?new Date(Z):Z===""?null:Z):Z)(H=f.header?z>=W.length?"__parsed_extra":W[z]:H,h0=f.transform?f.transform(h0,H):h0);H==="__parsed_extra"?(X[H]=X[H]||[],X[H].push(h0)):X[H]=h0}return f.header&&(z>W.length?a0("FieldMismatch","TooManyFields","Too many fields: expected "+W.length+" fields but parsed "+z,N+i0):z<W.length&&a0("FieldMismatch","TooFewFields","Too few fields: expected "+W.length+" fields but parsed "+z,N+i0)),X}var j;D&&(f.header||f.dynamicTyping||f.transform)&&(j=1,!D.data.length||Array.isArray(D.data[0])?(D.data=D.data.map(Q),j=D.data.length):D.data=Q(D.data,0),f.header&&D.meta&&(D.meta.fields=W),N+=j)}function r0(){return f.header&&W.length===0}function a0(F,Q,j,O){F={type:F,code:Q,message:j},O!==void 0&&(F.row=O),D.errors.push(F)}L(f.step)&&(p=f.step,f.step=function(F){D=F,r0()?e0():(e0(),D.data.length!==0&&(J+=F.data.length,f.preview&&J>f.preview?h.abort():(D.data=D.data[0],p(D,R))))}),this.parse=function(F,Q,j){var O=f.quoteChar||'"',O=(f.newline||(f.newline=this.guessLineEndings(F,O)),m=!1,f.delimiter?L(f.delimiter)&&(f.delimiter=f.delimiter(F),D.meta.delimiter=f.delimiter):((O=((q,i0,X,z,H)=>{var h0,Y,Z,l0;H=H||[",","	","|",";",l.RECORD_SEP,l.UNIT_SEP];for(var b0=0;b0<H.length;b0++){for(var w0,M0=H[b0],d0=0,m0=0,c0=0,_0=(Z=void 0,new w({comments:z,delimiter:M0,newline:i0,preview:10}).parse(q)),y0=0;y0<_0.data.length;y0++)X&&n0(_0.data[y0])?c0++:(w0=_0.data[y0].length,m0+=w0,Z===void 0?Z=w0:0<w0&&(d0+=Math.abs(w0-Z),Z=w0));0<_0.data.length&&(m0/=_0.data.length-c0),(Y===void 0||d0<=Y)&&(l0===void 0||l0<m0)&&1.99<m0&&(Y=d0,h0=M0,l0=m0)}return{successful:!!(f.delimiter=h0),bestDelimiter:h0}})(F,f.newline,f.skipEmptyLines,f.comments,f.delimitersToGuess)).successful?f.delimiter=O.bestDelimiter:(m=!0,f.delimiter=l.DefaultDelimiter),D.meta.delimiter=f.delimiter),P(f));return f.preview&&f.header&&O.preview++,c=F,h=new w(O),D=h.parse(c,Q,j),e0(),$?{meta:{paused:!0}}:D||{meta:{paused:!1}}},this.paused=function(){return $},this.pause=function(){$=!0,h.abort(),c=L(f.chunk)?"":c.substring(h.getCharIndex())},this.resume=function(){R.streamer._halted?($=!1,R.streamer.parseChunk(c,!0)):setTimeout(R.resume,3)},this.aborted=function(){return T},this.abort=function(){T=!0,h.abort(),D.meta.aborted=!0,L(f.complete)&&f.complete(D),c=""},this.guessLineEndings=function(q,O){q=q.substring(0,1048576);var O=new RegExp(k(O)+"([^]*?)"+k(O),"gm"),j=(q=q.replace(O,"")).split("\r"),O=q.split(`
`),q=1<O.length&&O[0].length<j[0].length;if(j.length===1||q)return`
`;for(var i0=0,X=0;X<j.length;X++)j[X][0]===`
`&&i0++;return i0>=j.length/2?`\r
`:"\r"}}function k(f){return f.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}function w(f){var c=(f=f||{}).delimiter,h=f.newline,m=f.comments,p=f.step,b=f.preview,M=f.fastMode,S=null,U=!1,R=f.quoteChar==null?'"':f.quoteChar,J=R;if(f.escapeChar!==void 0&&(J=f.escapeChar),(typeof c!="string"||-1<l.BAD_DELIMITERS.indexOf(c))&&(c=","),m===c)throw new Error("Comment character same as delimiter");m===!0?m="#":(typeof m!="string"||-1<l.BAD_DELIMITERS.indexOf(m))&&(m=!1),h!==`
`&&h!=="\r"&&h!==`\r
`&&(h=`
`);var N=0,$=!1;this.parse=function(T,W,D){if(typeof T!="string")throw new Error("Input must be a string");var n0=T.length,e0=c.length,r0=h.length,a0=m.length,F=L(p),Q=[],j=[],O=[],q=N=0;if(!T)return d0();if(M||M!==!1&&T.indexOf(R)===-1){for(var i0=T.split(h),X=0;X<i0.length;X++){if(O=i0[X],N+=O.length,X!==i0.length-1)N+=h.length;else if(D)return d0();if(!m||O.substring(0,a0)!==m){if(F){if(Q=[],l0(O.split(c)),m0(),$)return d0()}else l0(O.split(c));if(b&&b<=X)return Q=Q.slice(0,b),d0(!0)}}return d0()}for(var z=T.indexOf(c,N),H=T.indexOf(h,N),h0=new RegExp(k(J)+k(R),"g"),Y=T.indexOf(R,N);;)if(T[N]===R)for(Y=N,N++;;){if((Y=T.indexOf(R,Y+1))===-1)return D||j.push({type:"Quotes",code:"MissingQuotes",message:"Quoted field unterminated",row:Q.length,index:N}),w0();if(Y===n0-1)return w0(T.substring(N,Y).replace(h0,R));if(R===J&&T[Y+1]===J)Y++;else if(R===J||Y===0||T[Y-1]!==J){z!==-1&&z<Y+1&&(z=T.indexOf(c,Y+1));var Z=b0((H=H!==-1&&H<Y+1?T.indexOf(h,Y+1):H)===-1?z:Math.min(z,H));if(T.substr(Y+1+Z,e0)===c){O.push(T.substring(N,Y).replace(h0,R)),T[N=Y+1+Z+e0]!==R&&(Y=T.indexOf(R,N)),z=T.indexOf(c,N),H=T.indexOf(h,N);break}if(Z=b0(H),T.substring(Y+1+Z,Y+1+Z+r0)===h){if(O.push(T.substring(N,Y).replace(h0,R)),M0(Y+1+Z+r0),z=T.indexOf(c,N),Y=T.indexOf(R,N),F&&(m0(),$))return d0();if(b&&Q.length>=b)return d0(!0);break}j.push({type:"Quotes",code:"InvalidQuotes",message:"Trailing quote on quoted field is malformed",row:Q.length,index:N}),Y++}}else if(m&&O.length===0&&T.substring(N,N+a0)===m){if(H===-1)return d0();N=H+r0,H=T.indexOf(h,N),z=T.indexOf(c,N)}else if(z!==-1&&(z<H||H===-1))O.push(T.substring(N,z)),N=z+e0,z=T.indexOf(c,N);else{if(H===-1)break;if(O.push(T.substring(N,H)),M0(H+r0),F&&(m0(),$))return d0();if(b&&Q.length>=b)return d0(!0)}return w0();function l0(c0){Q.push(c0),q=N}function b0(c0){var _0=0;return _0=c0!==-1&&(c0=T.substring(Y+1,c0))&&c0.trim()===""?c0.length:_0}function w0(c0){return D||(c0===void 0&&(c0=T.substring(N)),O.push(c0),N=n0,l0(O),F&&m0()),d0()}function M0(c0){N=c0,l0(O),O=[],H=T.indexOf(h,N)}function d0(c0){if(f.header&&!W&&Q.length&&!U){var _0=Q[0],y0=Object.create(null),oe=new Set(_0);let Be=!1;for(let S0=0;S0<_0.length;S0++){let p0=_0[S0];if(y0[p0=L(f.transformHeader)?f.transformHeader(p0,S0):p0]){let D0,Ie=y0[p0];for(;D0=p0+"_"+Ie,Ie++,oe.has(D0););oe.add(D0),_0[S0]=D0,y0[p0]++,Be=!0,(S=S===null?{}:S)[D0]=p0}else y0[p0]=1,_0[S0]=p0;oe.add(p0)}Be&&console.warn("Duplicate headers found and renamed."),U=!0}return{data:Q,errors:j,meta:{delimiter:c,linebreak:h,aborted:$,truncated:!!c0,cursor:q+(W||0),renamedHeaders:S}}}function m0(){p(d0()),Q=[],j=[]}},this.abort=function(){$=!0},this.getCharIndex=function(){return N}}function E(f){var c=f.data,h=G[c.workerId],m=!1;if(c.error)h.userError(c.error,c.file);else if(c.results&&c.results.data){var p={abort:function(){m=!0,v(c.workerId,{data:[],errors:[],meta:{aborted:!0}})},pause:x,resume:x};if(L(h.userStep)){for(var b=0;b<c.results.data.length&&(h.userStep({data:c.results.data[b],errors:c.results.errors,meta:c.results.meta},p),!m);b++);delete c.results}else L(h.userChunk)&&(h.userChunk(c.results,p,c.file),delete c.results)}c.finished&&!m&&v(c.workerId,c.results)}function v(f,c){var h=G[f];L(h.userComplete)&&h.userComplete(c),h.terminate(),delete G[f]}function x(){throw new Error("Not implemented.")}function P(f){if(typeof f!="object"||f===null)return f;var c,h=Array.isArray(f)?[]:{};for(c in f)h[c]=P(f[c]);return h}function B(f,c){return function(){f.apply(c,arguments)}}function L(f){return typeof f=="function"}return l.parse=function(f,c){var h=(c=c||{}).dynamicTyping||!1;if(L(h)&&(c.dynamicTypingFunction=h,h={}),c.dynamicTyping=h,c.transform=!!L(c.transform)&&c.transform,!c.worker||!l.WORKERS_SUPPORTED)return h=null,l.NODE_STREAM_INPUT,typeof f=="string"?(f=(m=>m.charCodeAt(0)!==65279?m:m.slice(1))(f),h=new(c.download?s:A)(c)):f.readable===!0&&L(f.read)&&L(f.on)?h=new y(c):(a.File&&f instanceof File||f instanceof Object)&&(h=new g(c)),h.stream(f);(h=(()=>{var m;return!!l.WORKERS_SUPPORTED&&(m=(()=>{var p=a.URL||a.webkitURL||null,b=t.toString();return l.BLOB_URL||(l.BLOB_URL=p.createObjectURL(new Blob(["var global = (function() { if (typeof self !== 'undefined') { return self; } if (typeof window !== 'undefined') { return window; } if (typeof global !== 'undefined') { return global; } return {}; })(); global.IS_PAPA_WORKER=true; ","(",b,")();"],{type:"text/javascript"})))})(),(m=new a.Worker(m)).onmessage=E,m.id=u++,G[m.id]=m)})()).userStep=c.step,h.userChunk=c.chunk,h.userComplete=c.complete,h.userError=c.error,c.step=L(c.step),c.chunk=L(c.chunk),c.complete=L(c.complete),c.error=L(c.error),delete c.worker,h.postMessage({input:f,config:c,workerId:h.id})},l.unparse=function(f,c){var h=!1,m=!0,p=",",b=`\r
`,M='"',S=M+M,U=!1,R=null,J=!1,N=((()=>{if(typeof c=="object"){if(typeof c.delimiter!="string"||l.BAD_DELIMITERS.filter(function(W){return c.delimiter.indexOf(W)!==-1}).length||(p=c.delimiter),typeof c.quotes!="boolean"&&typeof c.quotes!="function"&&!Array.isArray(c.quotes)||(h=c.quotes),typeof c.skipEmptyLines!="boolean"&&typeof c.skipEmptyLines!="string"||(U=c.skipEmptyLines),typeof c.newline=="string"&&(b=c.newline),typeof c.quoteChar=="string"&&(M=c.quoteChar),typeof c.header=="boolean"&&(m=c.header),Array.isArray(c.columns)){if(c.columns.length===0)throw new Error("Option columns is empty");R=c.columns}c.escapeChar!==void 0&&(S=c.escapeChar+M),c.escapeFormulae instanceof RegExp?J=c.escapeFormulae:typeof c.escapeFormulae=="boolean"&&c.escapeFormulae&&(J=/^[=+\-@\t\r].*$/)}})(),new RegExp(k(M),"g"));if(typeof f=="string"&&(f=JSON.parse(f)),Array.isArray(f)){if(!f.length||Array.isArray(f[0]))return $(null,f,U);if(typeof f[0]=="object")return $(R||Object.keys(f[0]),f,U)}else if(typeof f=="object")return typeof f.data=="string"&&(f.data=JSON.parse(f.data)),Array.isArray(f.data)&&(f.fields||(f.fields=f.meta&&f.meta.fields||R),f.fields||(f.fields=Array.isArray(f.data[0])?f.fields:typeof f.data[0]=="object"?Object.keys(f.data[0]):[]),Array.isArray(f.data[0])||typeof f.data[0]=="object"||(f.data=[f.data])),$(f.fields||[],f.data||[],U);throw new Error("Unable to serialize unrecognized input");function $(W,D,n0){var e0="",r0=(typeof W=="string"&&(W=JSON.parse(W)),typeof D=="string"&&(D=JSON.parse(D)),Array.isArray(W)&&0<W.length),a0=!Array.isArray(D[0]);if(r0&&m){for(var F=0;F<W.length;F++)0<F&&(e0+=p),e0+=T(W[F],F);0<D.length&&(e0+=b)}for(var Q=0;Q<D.length;Q++){var j=(r0?W:D[Q]).length,O=!1,q=r0?Object.keys(D[Q]).length===0:D[Q].length===0;if(n0&&!r0&&(O=n0==="greedy"?D[Q].join("").trim()==="":D[Q].length===1&&D[Q][0].length===0),n0==="greedy"&&r0){for(var i0=[],X=0;X<j;X++){var z=a0?W[X]:X;i0.push(D[Q][z])}O=i0.join("").trim()===""}if(!O){for(var H=0;H<j;H++){0<H&&!q&&(e0+=p);var h0=r0&&a0?W[H]:H;e0+=T(D[Q][h0],H)}Q<D.length-1&&(!n0||0<j&&!q)&&(e0+=b)}}return e0}function T(W,D){var n0,e0;return W==null?"":W.constructor===Date?JSON.stringify(W).slice(1,25):(e0=!1,J&&typeof W=="string"&&J.test(W)&&(W="'"+W,e0=!0),n0=W.toString().replace(N,S),(e0=e0||h===!0||typeof h=="function"&&h(W,D)||Array.isArray(h)&&h[D]||((r0,a0)=>{for(var F=0;F<a0.length;F++)if(-1<r0.indexOf(a0[F]))return!0;return!1})(n0,l.BAD_DELIMITERS)||-1<n0.indexOf(p)||n0.charAt(0)===" "||n0.charAt(n0.length-1)===" ")?M+n0+M:n0)}},l.RECORD_SEP="",l.UNIT_SEP="",l.BYTE_ORDER_MARK="\uFEFF",l.BAD_DELIMITERS=["\r",`
`,'"',l.BYTE_ORDER_MARK],l.WORKERS_SUPPORTED=!i&&!!a.Worker,l.NODE_STREAM_INPUT=1,l.LocalChunkSize=10485760,l.RemoteChunkSize=5242880,l.DefaultDelimiter=",",l.Parser=w,l.ParserHandle=C,l.NetworkStreamer=s,l.FileStreamer=g,l.StringStreamer=A,l.ReadableStreamStreamer=y,a.jQuery&&((r=a.jQuery).fn.parse=function(f){var c=f.config||{},h=[];return this.each(function(b){if(!(r(this).prop("tagName").toUpperCase()==="INPUT"&&r(this).attr("type").toLowerCase()==="file"&&a.FileReader)||!this.files||this.files.length===0)return!0;for(var M=0;M<this.files.length;M++)h.push({file:this.files[M],inputElem:this,instanceConfig:r.extend({},c)})}),m(),this;function m(){if(h.length===0)L(f.complete)&&f.complete();else{var b,M,S,U,R=h[0];if(L(f.before)){var J=f.before(R.file,R.inputElem);if(typeof J=="object"){if(J.action==="abort")return b="AbortError",M=R.file,S=R.inputElem,U=J.reason,void(L(f.error)&&f.error({name:b},M,S,U));if(J.action==="skip")return void p();typeof J.config=="object"&&(R.instanceConfig=r.extend(R.instanceConfig,J.config))}else if(J==="skip")return void p()}var N=R.instanceConfig.complete;R.instanceConfig.complete=function($){L(N)&&N($,R.file,R.inputElem),p()},l.parse(R.file,R.instanceConfig)}}function p(){h.splice(0,1),m()}}),o&&(a.onmessage=function(f){f=f.data,l.WORKER_ID===void 0&&f&&(l.WORKER_ID=f.workerId),typeof f.input=="string"?a.postMessage({workerId:l.WORKER_ID,results:l.parse(f.input,f.config),finished:!0}):(a.File&&f.input instanceof File||f.input instanceof Object)&&(f=l.parse(f.input,f.config))&&a.postMessage({workerId:l.WORKER_ID,results:f,finished:!0})}),(s.prototype=Object.create(d.prototype)).constructor=s,(g.prototype=Object.create(d.prototype)).constructor=g,(A.prototype=Object.create(A.prototype)).constructor=A,(y.prototype=Object.create(d.prototype)).constructor=y,l})}(V0)),V0.exports}var kr=vr();const Er=(e,n)=>kr.unparse({fields:n,data:e}),Br=(e,n)=>{const t=new Blob([e],{type:"text/csv;charset=utf-8;"}),a=URL.createObjectURL(t),r=document.createElement("a");r.href=a,r.setAttribute("download",n),document.body.appendChild(r),r.click(),document.body.removeChild(r),URL.revokeObjectURL(a)},$0={"02":"AK","01":"AL","05":"AR","04":"AZ","06":"CA","08":"CO","09":"CT",10:"DE",12:"FL",13:"GA",15:"HI",19:"IA",16:"ID",17:"IL",18:"IN",20:"KS",21:"KY",22:"LA",25:"MA",24:"MD",23:"ME",26:"MI",27:"MN",29:"MO",28:"MS",30:"MT",37:"NC",38:"ND",31:"NE",33:"NH",34:"NJ",35:"NM",32:"NV",36:"NY",39:"OH",40:"OK",41:"OR",42:"PA",44:"RI",45:"SC",46:"SD",47:"TN",48:"TX",49:"UT",51:"VA",50:"VT",53:"WA",55:"WI",54:"WV",56:"WY"},U0={"01":{G0100010:"Autauga",G0100030:"Baldwin",G0100050:"Barbour",G0100070:"Bibb",G0100090:"Blount",G0100110:"Bullock",G0100130:"Butler",G0100150:"Calhoun",G0100170:"Chambers",G0100190:"Cherokee",G0100210:"Chilton",G0100230:"Choctaw",G0100250:"Clarke",G0100270:"Clay",G0100290:"Cleburne",G0100310:"Coffee",G0100330:"Colbert",G0100350:"Conecuh",G0100370:"Coosa",G0100390:"Covington",G0100410:"Crenshaw",G0100430:"Cullman",G0100450:"Dale",G0100470:"Dallas",G0100490:"DeKalb",G0100510:"Elmore",G0100530:"Escambia",G0100550:"Etowah",G0100570:"Fayette",G0100590:"Franklin",G0100610:"Geneva",G0100630:"Greene",G0100650:"Hale",G0100670:"Henry",G0100690:"Houston",G0100710:"Jackson",G0100730:"Jefferson",G0100750:"Lamar",G0100770:"Lauderdale",G0100790:"Lawrence",G0100810:"Lee",G0100830:"Limestone",G0100850:"Lowndes",G0100870:"Macon",G0100890:"Madison",G0100910:"Marengo",G0100930:"Marion",G0100950:"Marshall",G0100970:"Mobile",G0100990:"Monroe",G0101010:"Montgomery",G0101030:"Morgan",G0101050:"Perry",G0101070:"Pickens",G0101090:"Pike",G0101110:"Randolph",G0101130:"Russell",G0101170:"Shelby",G0101150:"St. Clair",G0101190:"Sumter",G0101210:"Talladega",G0101230:"Tallapoosa",G0101250:"Tuscaloosa",G0101270:"Walker",G0101290:"Washington",G0101310:"Wilcox",G0101330:"Winston"},"02":{G0200130:"Aleutians East",G0200160:"Aleutians West",G0200200:"Anchorage",G0200500:"Bethel",G0200600:"Bristol Bay",G0200630:"Chugach",G0200660:"Copper River",G0200680:"Denali",G0200700:"Dillingham",G0200900:"Fairbanks North Star",G0201000:"Haines",G0201050:"Hoonah-Angoon",G0201100:"Juneau",G0201220:"Kenai Peninsula",G0201300:"Ketchikan Gateway",G0201500:"Kodiak Island",G0201580:"Kusilvak",G0201640:"Lake and Peninsula",G0201700:"Matanuska-Susitna",G0201800:"Nome",G0201850:"North Slope",G0201880:"Northwest Arctic",G0201950:"Petersburg",G0201980:"Prince of Wales-Hyder",G0202200:"Sitka",G0202300:"Skagway",G0202400:"Southeast Fairbanks",G0202750:"Wrangell",G0202820:"Yakutat",G0202900:"Yukon-Koyukuk"},"04":{G0400010:"Apache",G0400030:"Cochise",G0400050:"Coconino",G0400070:"Gila",G0400090:"Graham",G0400110:"Greenlee",G0400120:"La Paz",G0400130:"Maricopa",G0400150:"Mohave",G0400170:"Navajo",G0400190:"Pima",G0400210:"Pinal",G0400230:"Santa Cruz",G0400250:"Yavapai",G0400270:"Yuma"},"05":{G0500010:"Arkansas",G0500030:"Ashley",G0500050:"Baxter",G0500070:"Benton",G0500090:"Boone",G0500110:"Bradley",G0500130:"Calhoun",G0500150:"Carroll",G0500170:"Chicot",G0500190:"Clark",G0500210:"Clay",G0500230:"Cleburne",G0500250:"Cleveland",G0500270:"Columbia",G0500290:"Conway",G0500310:"Craighead",G0500330:"Crawford",G0500350:"Crittenden",G0500370:"Cross",G0500390:"Dallas",G0500410:"Desha",G0500430:"Drew",G0500450:"Faulkner",G0500470:"Franklin",G0500490:"Fulton",G0500510:"Garland",G0500530:"Grant",G0500550:"Greene",G0500570:"Hempstead",G0500590:"Hot Spring",G0500610:"Howard",G0500630:"Independence",G0500650:"Izard",G0500670:"Jackson",G0500690:"Jefferson",G0500710:"Johnson",G0500730:"Lafayette",G0500750:"Lawrence",G0500770:"Lee",G0500790:"Lincoln",G0500810:"Little River",G0500830:"Logan",G0500850:"Lonoke",G0500870:"Madison",G0500890:"Marion",G0500910:"Miller",G0500930:"Mississippi",G0500950:"Monroe",G0500970:"Montgomery",G0500990:"Nevada",G0501010:"Newton",G0501030:"Ouachita",G0501050:"Perry",G0501070:"Phillips",G0501090:"Pike",G0501110:"Poinsett",G0501130:"Polk",G0501150:"Pope",G0501170:"Prairie",G0501190:"Pulaski",G0501210:"Randolph",G0501250:"Saline",G0501270:"Scott",G0501290:"Searcy",G0501310:"Sebastian",G0501330:"Sevier",G0501350:"Sharp",G0501230:"St. Francis",G0501370:"Stone",G0501390:"Union",G0501410:"Van Buren",G0501430:"Washington",G0501450:"White",G0501470:"Woodruff",G0501490:"Yell"},"06":{G0600010:"Alameda",G0600030:"Alpine",G0600050:"Amador",G0600070:"Butte",G0600090:"Calaveras",G0600110:"Colusa",G0600130:"Contra Costa",G0600150:"Del Norte",G0600170:"El Dorado",G0600190:"Fresno",G0600210:"Glenn",G0600230:"Humboldt",G0600250:"Imperial",G0600270:"Inyo",G0600290:"Kern",G0600310:"Kings",G0600330:"Lake",G0600350:"Lassen",G0600370:"Los Angeles",G0600390:"Madera",G0600410:"Marin",G0600430:"Mariposa",G0600450:"Mendocino",G0600470:"Merced",G0600490:"Modoc",G0600510:"Mono",G0600530:"Monterey",G0600550:"Napa",G0600570:"Nevada",G0600590:"Orange",G0600610:"Placer",G0600630:"Plumas",G0600650:"Riverside",G0600670:"Sacramento",G0600690:"San Benito",G0600710:"San Bernardino",G0600730:"San Diego",G0600750:"San Francisco",G0600770:"San Joaquin",G0600790:"San Luis Obispo",G0600810:"San Mateo",G0600830:"Santa Barbara",G0600850:"Santa Clara",G0600870:"Santa Cruz",G0600890:"Shasta",G0600910:"Sierra",G0600930:"Siskiyou",G0600950:"Solano",G0600970:"Sonoma",G0600990:"Stanislaus",G0601010:"Sutter",G0601030:"Tehama",G0601050:"Trinity",G0601070:"Tulare",G0601090:"Tuolumne",G0601110:"Ventura",G0601130:"Yolo",G0601150:"Yuba"},"08":{G0800010:"Adams",G0800030:"Alamosa",G0800050:"Arapahoe",G0800070:"Archuleta",G0800090:"Baca",G0800110:"Bent",G0800130:"Boulder",G0800140:"Broomfield",G0800150:"Chaffee",G0800170:"Cheyenne",G0800190:"Clear Creek",G0800210:"Conejos",G0800230:"Costilla",G0800250:"Crowley",G0800270:"Custer",G0800290:"Delta",G0800310:"Denver",G0800330:"Dolores",G0800350:"Douglas",G0800370:"Eagle",G0800410:"El Paso",G0800390:"Elbert",G0800430:"Fremont",G0800450:"Garfield",G0800470:"Gilpin",G0800490:"Grand",G0800510:"Gunnison",G0800530:"Hinsdale",G0800550:"Huerfano",G0800570:"Jackson",G0800590:"Jefferson",G0800610:"Kiowa",G0800630:"Kit Carson",G0800670:"La Plata",G0800650:"Lake",G0800690:"Larimer",G0800710:"Las Animas",G0800730:"Lincoln",G0800750:"Logan",G0800770:"Mesa",G0800790:"Mineral",G0800810:"Moffat",G0800830:"Montezuma",G0800850:"Montrose",G0800870:"Morgan",G0800890:"Otero",G0800910:"Ouray",G0800930:"Park",G0800950:"Phillips",G0800970:"Pitkin",G0800990:"Prowers",G0801010:"Pueblo",G0801030:"Rio Blanco",G0801050:"Rio Grande",G0801070:"Routt",G0801090:"Saguache",G0801110:"San Juan",G0801130:"San Miguel",G0801150:"Sedgwick",G0801170:"Summit",G0801190:"Teller",G0801210:"Washington",G0801230:"Weld",G0801250:"Yuma"},"09":{G0901100:"Capitol",G0901200:"Greater Bridgeport",G0901300:"Lower Connecticut River Valley",G0901400:"Naugatuck Valley",G0901500:"Northeastern Connecticut",G0901600:"Northwest Hills",G0901700:"South Central Connecticut",G0901800:"Southeastern Connecticut",G0901900:"Western Connecticut"},10:{G1000010:"Kent",G1000030:"New Castle",G1000050:"Sussex"},11:{G1100010:"District of Columbia"},12:{G1200010:"Alachua",G1200030:"Baker",G1200050:"Bay",G1200070:"Bradford",G1200090:"Brevard",G1200110:"Broward",G1200130:"Calhoun",G1200150:"Charlotte",G1200170:"Citrus",G1200190:"Clay",G1200210:"Collier",G1200230:"Columbia",G1200270:"DeSoto",G1200290:"Dixie",G1200310:"Duval",G1200330:"Escambia",G1200350:"Flagler",G1200370:"Franklin",G1200390:"Gadsden",G1200410:"Gilchrist",G1200430:"Glades",G1200450:"Gulf",G1200470:"Hamilton",G1200490:"Hardee",G1200510:"Hendry",G1200530:"Hernando",G1200550:"Highlands",G1200570:"Hillsborough",G1200590:"Holmes",G1200610:"Indian River",G1200630:"Jackson",G1200650:"Jefferson",G1200670:"Lafayette",G1200690:"Lake",G1200710:"Lee",G1200730:"Leon",G1200750:"Levy",G1200770:"Liberty",G1200790:"Madison",G1200810:"Manatee",G1200830:"Marion",G1200850:"Martin",G1200860:"Miami-Dade",G1200870:"Monroe",G1200890:"Nassau",G1200910:"Okaloosa",G1200930:"Okeechobee",G1200950:"Orange",G1200970:"Osceola",G1200990:"Palm Beach",G1201010:"Pasco",G1201030:"Pinellas",G1201050:"Polk",G1201070:"Putnam",G1201130:"Santa Rosa",G1201150:"Sarasota",G1201170:"Seminole",G1201090:"St. Johns",G1201110:"St. Lucie",G1201190:"Sumter",G1201210:"Suwannee",G1201230:"Taylor",G1201250:"Union",G1201270:"Volusia",G1201290:"Wakulla",G1201310:"Walton",G1201330:"Washington"},13:{G1300010:"Appling",G1300030:"Atkinson",G1300050:"Bacon",G1300070:"Baker",G1300090:"Baldwin",G1300110:"Banks",G1300130:"Barrow",G1300150:"Bartow",G1300170:"Ben Hill",G1300190:"Berrien",G1300210:"Bibb",G1300230:"Bleckley",G1300250:"Brantley",G1300270:"Brooks",G1300290:"Bryan",G1300310:"Bulloch",G1300330:"Burke",G1300350:"Butts",G1300370:"Calhoun",G1300390:"Camden",G1300430:"Candler",G1300450:"Carroll",G1300470:"Catoosa",G1300490:"Charlton",G1300510:"Chatham",G1300530:"Chattahoochee",G1300550:"Chattooga",G1300570:"Cherokee",G1300590:"Clarke",G1300610:"Clay",G1300630:"Clayton",G1300650:"Clinch",G1300670:"Cobb",G1300690:"Coffee",G1300710:"Colquitt",G1300730:"Columbia",G1300750:"Cook",G1300770:"Coweta",G1300790:"Crawford",G1300810:"Crisp",G1300830:"Dade",G1300850:"Dawson",G1300890:"DeKalb",G1300870:"Decatur",G1300910:"Dodge",G1300930:"Dooly",G1300950:"Dougherty",G1300970:"Douglas",G1300990:"Early",G1301010:"Echols",G1301030:"Effingham",G1301050:"Elbert",G1301070:"Emanuel",G1301090:"Evans",G1301110:"Fannin",G1301130:"Fayette",G1301150:"Floyd",G1301170:"Forsyth",G1301190:"Franklin",G1301210:"Fulton",G1301230:"Gilmer",G1301250:"Glascock",G1301270:"Glynn",G1301290:"Gordon",G1301310:"Grady",G1301330:"Greene",G1301350:"Gwinnett",G1301370:"Habersham",G1301390:"Hall",G1301410:"Hancock",G1301430:"Haralson",G1301450:"Harris",G1301470:"Hart",G1301490:"Heard",G1301510:"Henry",G1301530:"Houston",G1301550:"Irwin",G1301570:"Jackson",G1301590:"Jasper",G1301610:"Jeff Davis",G1301630:"Jefferson",G1301650:"Jenkins",G1301670:"Johnson",G1301690:"Jones",G1301710:"Lamar",G1301730:"Lanier",G1301750:"Laurens",G1301770:"Lee",G1301790:"Liberty",G1301810:"Lincoln",G1301830:"Long",G1301850:"Lowndes",G1301870:"Lumpkin",G1301930:"Macon",G1301950:"Madison",G1301970:"Marion",G1301890:"McDuffie",G1301910:"McIntosh",G1301990:"Meriwether",G1302010:"Miller",G1302050:"Mitchell",G1302070:"Monroe",G1302090:"Montgomery",G1302110:"Morgan",G1302130:"Murray",G1302150:"Muscogee",G1302170:"Newton",G1302190:"Oconee",G1302210:"Oglethorpe",G1302230:"Paulding",G1302250:"Peach",G1302270:"Pickens",G1302290:"Pierce",G1302310:"Pike",G1302330:"Polk",G1302350:"Pulaski",G1302370:"Putnam",G1302390:"Quitman",G1302410:"Rabun",G1302430:"Randolph",G1302450:"Richmond",G1302470:"Rockdale",G1302490:"Schley",G1302510:"Screven",G1302530:"Seminole",G1302550:"Spalding",G1302570:"Stephens",G1302590:"Stewart",G1302610:"Sumter",G1302630:"Talbot",G1302650:"Taliaferro",G1302670:"Tattnall",G1302690:"Taylor",G1302710:"Telfair",G1302730:"Terrell",G1302750:"Thomas",G1302770:"Tift",G1302790:"Toombs",G1302810:"Towns",G1302830:"Treutlen",G1302850:"Troup",G1302870:"Turner",G1302890:"Twiggs",G1302910:"Union",G1302930:"Upson",G1302950:"Walker",G1302970:"Walton",G1302990:"Ware",G1303010:"Warren",G1303030:"Washington",G1303050:"Wayne",G1303070:"Webster",G1303090:"Wheeler",G1303110:"White",G1303130:"Whitfield",G1303150:"Wilcox",G1303170:"Wilkes",G1303190:"Wilkinson",G1303210:"Worth"},15:{G1500010:"Hawaii",G1500030:"Honolulu",G1500050:"Kalawao",G1500070:"Kauai",G1500090:"Maui"},16:{G1600010:"Ada",G1600030:"Adams",G1600050:"Bannock",G1600070:"Bear Lake",G1600090:"Benewah",G1600110:"Bingham",G1600130:"Blaine",G1600150:"Boise",G1600170:"Bonner",G1600190:"Bonneville",G1600210:"Boundary",G1600230:"Butte",G1600250:"Camas",G1600270:"Canyon",G1600290:"Caribou",G1600310:"Cassia",G1600330:"Clark",G1600350:"Clearwater",G1600370:"Custer",G1600390:"Elmore",G1600410:"Franklin",G1600430:"Fremont",G1600450:"Gem",G1600470:"Gooding",G1600490:"Idaho",G1600510:"Jefferson",G1600530:"Jerome",G1600550:"Kootenai",G1600570:"Latah",G1600590:"Lemhi",G1600610:"Lewis",G1600630:"Lincoln",G1600650:"Madison",G1600670:"Minidoka",G1600690:"Nez Perce",G1600710:"Oneida",G1600730:"Owyhee",G1600750:"Payette",G1600770:"Power",G1600790:"Shoshone",G1600810:"Teton",G1600830:"Twin Falls",G1600850:"Valley",G1600870:"Washington"},17:{G1700010:"Adams",G1700030:"Alexander",G1700050:"Bond",G1700070:"Boone",G1700090:"Brown",G1700110:"Bureau",G1700130:"Calhoun",G1700150:"Carroll",G1700170:"Cass",G1700190:"Champaign",G1700210:"Christian",G1700230:"Clark",G1700250:"Clay",G1700270:"Clinton",G1700290:"Coles",G1700310:"Cook",G1700330:"Crawford",G1700350:"Cumberland",G1700390:"De Witt",G1700370:"DeKalb",G1700410:"Douglas",G1700430:"DuPage",G1700450:"Edgar",G1700470:"Edwards",G1700490:"Effingham",G1700510:"Fayette",G1700530:"Ford",G1700550:"Franklin",G1700570:"Fulton",G1700590:"Gallatin",G1700610:"Greene",G1700630:"Grundy",G1700650:"Hamilton",G1700670:"Hancock",G1700690:"Hardin",G1700710:"Henderson",G1700730:"Henry",G1700750:"Iroquois",G1700770:"Jackson",G1700790:"Jasper",G1700810:"Jefferson",G1700830:"Jersey",G1700850:"Jo Daviess",G1700870:"Johnson",G1700890:"Kane",G1700910:"Kankakee",G1700930:"Kendall",G1700950:"Knox",G1700990:"LaSalle",G1700970:"Lake",G1701010:"Lawrence",G1701030:"Lee",G1701050:"Livingston",G1701070:"Logan",G1701150:"Macon",G1701170:"Macoupin",G1701190:"Madison",G1701210:"Marion",G1701230:"Marshall",G1701250:"Mason",G1701270:"Massac",G1701090:"McDonough",G1701110:"McHenry",G1701130:"McLean",G1701290:"Menard",G1701310:"Mercer",G1701330:"Monroe",G1701350:"Montgomery",G1701370:"Morgan",G1701390:"Moultrie",G1701410:"Ogle",G1701430:"Peoria",G1701450:"Perry",G1701470:"Piatt",G1701490:"Pike",G1701510:"Pope",G1701530:"Pulaski",G1701550:"Putnam",G1701570:"Randolph",G1701590:"Richland",G1701610:"Rock Island",G1701650:"Saline",G1701670:"Sangamon",G1701690:"Schuyler",G1701710:"Scott",G1701730:"Shelby",G1701630:"St. Clair",G1701750:"Stark",G1701770:"Stephenson",G1701790:"Tazewell",G1701810:"Union",G1701830:"Vermilion",G1701850:"Wabash",G1701870:"Warren",G1701890:"Washington",G1701910:"Wayne",G1701930:"White",G1701950:"Whiteside",G1701970:"Will",G1701990:"Williamson",G1702010:"Winnebago",G1702030:"Woodford"},18:{G1800010:"Adams",G1800030:"Allen",G1800050:"Bartholomew",G1800070:"Benton",G1800090:"Blackford",G1800110:"Boone",G1800130:"Brown",G1800150:"Carroll",G1800170:"Cass",G1800190:"Clark",G1800210:"Clay",G1800230:"Clinton",G1800250:"Crawford",G1800270:"Daviess",G1800330:"DeKalb",G1800290:"Dearborn",G1800310:"Decatur",G1800350:"Delaware",G1800370:"Dubois",G1800390:"Elkhart",G1800410:"Fayette",G1800430:"Floyd",G1800450:"Fountain",G1800470:"Franklin",G1800490:"Fulton",G1800510:"Gibson",G1800530:"Grant",G1800550:"Greene",G1800570:"Hamilton",G1800590:"Hancock",G1800610:"Harrison",G1800630:"Hendricks",G1800650:"Henry",G1800670:"Howard",G1800690:"Huntington",G1800710:"Jackson",G1800730:"Jasper",G1800750:"Jay",G1800770:"Jefferson",G1800790:"Jennings",G1800810:"Johnson",G1800830:"Knox",G1800850:"Kosciusko",G1800870:"LaGrange",G1800910:"LaPorte",G1800890:"Lake",G1800930:"Lawrence",G1800950:"Madison",G1800970:"Marion",G1800990:"Marshall",G1801010:"Martin",G1801030:"Miami",G1801050:"Monroe",G1801070:"Montgomery",G1801090:"Morgan",G1801110:"Newton",G1801130:"Noble",G1801150:"Ohio",G1801170:"Orange",G1801190:"Owen",G1801210:"Parke",G1801230:"Perry",G1801250:"Pike",G1801270:"Porter",G1801290:"Posey",G1801310:"Pulaski",G1801330:"Putnam",G1801350:"Randolph",G1801370:"Ripley",G1801390:"Rush",G1801430:"Scott",G1801450:"Shelby",G1801470:"Spencer",G1801410:"St. Joseph",G1801490:"Starke",G1801510:"Steuben",G1801530:"Sullivan",G1801550:"Switzerland",G1801570:"Tippecanoe",G1801590:"Tipton",G1801610:"Union",G1801630:"Vanderburgh",G1801650:"Vermillion",G1801670:"Vigo",G1801690:"Wabash",G1801710:"Warren",G1801730:"Warrick",G1801750:"Washington",G1801770:"Wayne",G1801790:"Wells",G1801810:"White",G1801830:"Whitley"},19:{G1900010:"Adair",G1900030:"Adams",G1900050:"Allamakee",G1900070:"Appanoose",G1900090:"Audubon",G1900110:"Benton",G1900130:"Black Hawk",G1900150:"Boone",G1900170:"Bremer",G1900190:"Buchanan",G1900210:"Buena Vista",G1900230:"Butler",G1900250:"Calhoun",G1900270:"Carroll",G1900290:"Cass",G1900310:"Cedar",G1900330:"Cerro Gordo",G1900350:"Cherokee",G1900370:"Chickasaw",G1900390:"Clarke",G1900410:"Clay",G1900430:"Clayton",G1900450:"Clinton",G1900470:"Crawford",G1900490:"Dallas",G1900510:"Davis",G1900530:"Decatur",G1900550:"Delaware",G1900570:"Des Moines",G1900590:"Dickinson",G1900610:"Dubuque",G1900630:"Emmet",G1900650:"Fayette",G1900670:"Floyd",G1900690:"Franklin",G1900710:"Fremont",G1900730:"Greene",G1900750:"Grundy",G1900770:"Guthrie",G1900790:"Hamilton",G1900810:"Hancock",G1900830:"Hardin",G1900850:"Harrison",G1900870:"Henry",G1900890:"Howard",G1900910:"Humboldt",G1900930:"Ida",G1900950:"Iowa",G1900970:"Jackson",G1900990:"Jasper",G1901010:"Jefferson",G1901030:"Johnson",G1901050:"Jones",G1901070:"Keokuk",G1901090:"Kossuth",G1901110:"Lee",G1901130:"Linn",G1901150:"Louisa",G1901170:"Lucas",G1901190:"Lyon",G1901210:"Madison",G1901230:"Mahaska",G1901250:"Marion",G1901270:"Marshall",G1901290:"Mills",G1901310:"Mitchell",G1901330:"Monona",G1901350:"Monroe",G1901370:"Montgomery",G1901390:"Muscatine",G1901410:"O'Brien",G1901430:"Osceola",G1901450:"Page",G1901470:"Palo Alto",G1901490:"Plymouth",G1901510:"Pocahontas",G1901530:"Polk",G1901550:"Pottawattamie",G1901570:"Poweshiek",G1901590:"Ringgold",G1901610:"Sac",G1901630:"Scott",G1901650:"Shelby",G1901670:"Sioux",G1901690:"Story",G1901710:"Tama",G1901730:"Taylor",G1901750:"Union",G1901770:"Van Buren",G1901790:"Wapello",G1901810:"Warren",G1901830:"Washington",G1901850:"Wayne",G1901870:"Webster",G1901890:"Winnebago",G1901910:"Winneshiek",G1901930:"Woodbury",G1901950:"Worth",G1901970:"Wright"},20:{G2000010:"Allen",G2000030:"Anderson",G2000050:"Atchison",G2000070:"Barber",G2000090:"Barton",G2000110:"Bourbon",G2000130:"Brown",G2000150:"Butler",G2000170:"Chase",G2000190:"Chautauqua",G2000210:"Cherokee",G2000230:"Cheyenne",G2000250:"Clark",G2000270:"Clay",G2000290:"Cloud",G2000310:"Coffey",G2000330:"Comanche",G2000350:"Cowley",G2000370:"Crawford",G2000390:"Decatur",G2000410:"Dickinson",G2000430:"Doniphan",G2000450:"Douglas",G2000470:"Edwards",G2000490:"Elk",G2000510:"Ellis",G2000530:"Ellsworth",G2000550:"Finney",G2000570:"Ford",G2000590:"Franklin",G2000610:"Geary",G2000630:"Gove",G2000650:"Graham",G2000670:"Grant",G2000690:"Gray",G2000710:"Greeley",G2000730:"Greenwood",G2000750:"Hamilton",G2000770:"Harper",G2000790:"Harvey",G2000810:"Haskell",G2000830:"Hodgeman",G2000850:"Jackson",G2000870:"Jefferson",G2000890:"Jewell",G2000910:"Johnson",G2000930:"Kearny",G2000950:"Kingman",G2000970:"Kiowa",G2000990:"Labette",G2001010:"Lane",G2001030:"Leavenworth",G2001050:"Lincoln",G2001070:"Linn",G2001090:"Logan",G2001110:"Lyon",G2001150:"Marion",G2001170:"Marshall",G2001130:"McPherson",G2001190:"Meade",G2001210:"Miami",G2001230:"Mitchell",G2001250:"Montgomery",G2001270:"Morris",G2001290:"Morton",G2001310:"Nemaha",G2001330:"Neosho",G2001350:"Ness",G2001370:"Norton",G2001390:"Osage",G2001410:"Osborne",G2001430:"Ottawa",G2001450:"Pawnee",G2001470:"Phillips",G2001490:"Pottawatomie",G2001510:"Pratt",G2001530:"Rawlins",G2001550:"Reno",G2001570:"Republic",G2001590:"Rice",G2001610:"Riley",G2001630:"Rooks",G2001650:"Rush",G2001670:"Russell",G2001690:"Saline",G2001710:"Scott",G2001730:"Sedgwick",G2001750:"Seward",G2001770:"Shawnee",G2001790:"Sheridan",G2001810:"Sherman",G2001830:"Smith",G2001850:"Stafford",G2001870:"Stanton",G2001890:"Stevens",G2001910:"Sumner",G2001930:"Thomas",G2001950:"Trego",G2001970:"Wabaunsee",G2001990:"Wallace",G2002010:"Washington",G2002030:"Wichita",G2002050:"Wilson",G2002070:"Woodson",G2002090:"Wyandotte"},21:{G2100010:"Adair",G2100030:"Allen",G2100050:"Anderson",G2100070:"Ballard",G2100090:"Barren",G2100110:"Bath",G2100130:"Bell",G2100150:"Boone",G2100170:"Bourbon",G2100190:"Boyd",G2100210:"Boyle",G2100230:"Bracken",G2100250:"Breathitt",G2100270:"Breckinridge",G2100290:"Bullitt",G2100310:"Butler",G2100330:"Caldwell",G2100350:"Calloway",G2100370:"Campbell",G2100390:"Carlisle",G2100410:"Carroll",G2100430:"Carter",G2100450:"Casey",G2100470:"Christian",G2100490:"Clark",G2100510:"Clay",G2100530:"Clinton",G2100550:"Crittenden",G2100570:"Cumberland",G2100590:"Daviess",G2100610:"Edmonson",G2100630:"Elliott",G2100650:"Estill",G2100670:"Fayette",G2100690:"Fleming",G2100710:"Floyd",G2100730:"Franklin",G2100750:"Fulton",G2100770:"Gallatin",G2100790:"Garrard",G2100810:"Grant",G2100830:"Graves",G2100850:"Grayson",G2100870:"Green",G2100890:"Greenup",G2100910:"Hancock",G2100930:"Hardin",G2100950:"Harlan",G2100970:"Harrison",G2100990:"Hart",G2101010:"Henderson",G2101030:"Henry",G2101050:"Hickman",G2101070:"Hopkins",G2101090:"Jackson",G2101110:"Jefferson",G2101130:"Jessamine",G2101150:"Johnson",G2101170:"Kenton",G2101190:"Knott",G2101210:"Knox",G2101230:"Larue",G2101250:"Laurel",G2101270:"Lawrence",G2101290:"Lee",G2101310:"Leslie",G2101330:"Letcher",G2101350:"Lewis",G2101370:"Lincoln",G2101390:"Livingston",G2101410:"Logan",G2101430:"Lyon",G2101510:"Madison",G2101530:"Magoffin",G2101550:"Marion",G2101570:"Marshall",G2101590:"Martin",G2101610:"Mason",G2101450:"McCracken",G2101470:"McCreary",G2101490:"McLean",G2101630:"Meade",G2101650:"Menifee",G2101670:"Mercer",G2101690:"Metcalfe",G2101710:"Monroe",G2101730:"Montgomery",G2101750:"Morgan",G2101770:"Muhlenberg",G2101790:"Nelson",G2101810:"Nicholas",G2101830:"Ohio",G2101850:"Oldham",G2101870:"Owen",G2101890:"Owsley",G2101910:"Pendleton",G2101930:"Perry",G2101950:"Pike",G2101970:"Powell",G2101990:"Pulaski",G2102010:"Robertson",G2102030:"Rockcastle",G2102050:"Rowan",G2102070:"Russell",G2102090:"Scott",G2102110:"Shelby",G2102130:"Simpson",G2102150:"Spencer",G2102170:"Taylor",G2102190:"Todd",G2102210:"Trigg",G2102230:"Trimble",G2102250:"Union",G2102270:"Warren",G2102290:"Washington",G2102310:"Wayne",G2102330:"Webster",G2102350:"Whitley",G2102370:"Wolfe",G2102390:"Woodford"},22:{G2200010:"Acadia",G2200030:"Allen",G2200050:"Ascension",G2200070:"Assumption",G2200090:"Avoyelles",G2200110:"Beauregard",G2200130:"Bienville",G2200150:"Bossier",G2200170:"Caddo",G2200190:"Calcasieu",G2200210:"Caldwell",G2200230:"Cameron",G2200250:"Catahoula",G2200270:"Claiborne",G2200290:"Concordia",G2200310:"De Soto",G2200330:"East Baton Rouge",G2200350:"East Carroll",G2200370:"East Feliciana",G2200390:"Evangeline",G2200410:"Franklin",G2200430:"Grant",G2200450:"Iberia",G2200470:"Iberville",G2200490:"Jackson",G2200510:"Jefferson",G2200530:"Jefferson Davis",G2200590:"LaSalle",G2200550:"Lafayette",G2200570:"Lafourche",G2200610:"Lincoln",G2200630:"Livingston",G2200650:"Madison",G2200670:"Morehouse",G2200690:"Natchitoches",G2200710:"Orleans",G2200730:"Ouachita",G2200750:"Plaquemines",G2200770:"Pointe Coupee",G2200790:"Rapides",G2200810:"Red River",G2200830:"Richland",G2200850:"Sabine",G2200870:"St. Bernard",G2200890:"St. Charles",G2200910:"St. Helena",G2200930:"St. James",G2200950:"St. John the Baptist",G2200970:"St. Landry",G2200990:"St. Martin",G2201010:"St. Mary",G2201030:"St. Tammany",G2201050:"Tangipahoa",G2201070:"Tensas",G2201090:"Terrebonne",G2201110:"Union",G2201130:"Vermilion",G2201150:"Vernon",G2201170:"Washington",G2201190:"Webster",G2201210:"West Baton Rouge",G2201230:"West Carroll",G2201250:"West Feliciana",G2201270:"Winn"},23:{G2300010:"Androscoggin",G2300030:"Aroostook",G2300050:"Cumberland",G2300070:"Franklin",G2300090:"Hancock",G2300110:"Kennebec",G2300130:"Knox",G2300150:"Lincoln",G2300170:"Oxford",G2300190:"Penobscot",G2300210:"Piscataquis",G2300230:"Sagadahoc",G2300250:"Somerset",G2300270:"Waldo",G2300290:"Washington",G2300310:"York"},24:{G2400010:"Allegany",G2400030:"Anne Arundel",G2405100:"Baltimore",G2400050:"Baltimore",G2400090:"Calvert",G2400110:"Caroline",G2400130:"Carroll",G2400150:"Cecil",G2400170:"Charles",G2400190:"Dorchester",G2400210:"Frederick",G2400230:"Garrett",G2400250:"Harford",G2400270:"Howard",G2400290:"Kent",G2400310:"Montgomery",G2400330:"Prince George's",G2400350:"Queen Anne's",G2400390:"Somerset",G2400370:"St. Mary's",G2400410:"Talbot",G2400430:"Washington",G2400450:"Wicomico",G2400470:"Worcester"},25:{G2500010:"Barnstable",G2500030:"Berkshire",G2500050:"Bristol",G2500070:"Dukes",G2500090:"Essex",G2500110:"Franklin",G2500130:"Hampden",G2500150:"Hampshire",G2500170:"Middlesex",G2500190:"Nantucket",G2500210:"Norfolk",G2500230:"Plymouth",G2500250:"Suffolk",G2500270:"Worcester"},26:{G2600010:"Alcona",G2600030:"Alger",G2600050:"Allegan",G2600070:"Alpena",G2600090:"Antrim",G2600110:"Arenac",G2600130:"Baraga",G2600150:"Barry",G2600170:"Bay",G2600190:"Benzie",G2600210:"Berrien",G2600230:"Branch",G2600250:"Calhoun",G2600270:"Cass",G2600290:"Charlevoix",G2600310:"Cheboygan",G2600330:"Chippewa",G2600350:"Clare",G2600370:"Clinton",G2600390:"Crawford",G2600410:"Delta",G2600430:"Dickinson",G2600450:"Eaton",G2600470:"Emmet",G2600490:"Genesee",G2600510:"Gladwin",G2600530:"Gogebic",G2600550:"Grand Traverse",G2600570:"Gratiot",G2600590:"Hillsdale",G2600610:"Houghton",G2600630:"Huron",G2600650:"Ingham",G2600670:"Ionia",G2600690:"Iosco",G2600710:"Iron",G2600730:"Isabella",G2600750:"Jackson",G2600770:"Kalamazoo",G2600790:"Kalkaska",G2600810:"Kent",G2600830:"Keweenaw",G2600850:"Lake",G2600870:"Lapeer",G2600890:"Leelanau",G2600910:"Lenawee",G2600930:"Livingston",G2600950:"Luce",G2600970:"Mackinac",G2600990:"Macomb",G2601010:"Manistee",G2601030:"Marquette",G2601050:"Mason",G2601070:"Mecosta",G2601090:"Menominee",G2601110:"Midland",G2601130:"Missaukee",G2601150:"Monroe",G2601170:"Montcalm",G2601190:"Montmorency",G2601210:"Muskegon",G2601230:"Newaygo",G2601250:"Oakland",G2601270:"Oceana",G2601290:"Ogemaw",G2601310:"Ontonagon",G2601330:"Osceola",G2601350:"Oscoda",G2601370:"Otsego",G2601390:"Ottawa",G2601410:"Presque Isle",G2601430:"Roscommon",G2601450:"Saginaw",G2601510:"Sanilac",G2601530:"Schoolcraft",G2601550:"Shiawassee",G2601470:"St. Clair",G2601490:"St. Joseph",G2601570:"Tuscola",G2601590:"Van Buren",G2601610:"Washtenaw",G2601630:"Wayne",G2601650:"Wexford"},27:{G2700010:"Aitkin",G2700030:"Anoka",G2700050:"Becker",G2700070:"Beltrami",G2700090:"Benton",G2700110:"Big Stone",G2700130:"Blue Earth",G2700150:"Brown",G2700170:"Carlton",G2700190:"Carver",G2700210:"Cass",G2700230:"Chippewa",G2700250:"Chisago",G2700270:"Clay",G2700290:"Clearwater",G2700310:"Cook",G2700330:"Cottonwood",G2700350:"Crow Wing",G2700370:"Dakota",G2700390:"Dodge",G2700410:"Douglas",G2700430:"Faribault",G2700450:"Fillmore",G2700470:"Freeborn",G2700490:"Goodhue",G2700510:"Grant",G2700530:"Hennepin",G2700550:"Houston",G2700570:"Hubbard",G2700590:"Isanti",G2700610:"Itasca",G2700630:"Jackson",G2700650:"Kanabec",G2700670:"Kandiyohi",G2700690:"Kittson",G2700710:"Koochiching",G2700730:"Lac qui Parle",G2700750:"Lake",G2700770:"Lake of the Woods",G2700790:"Le Sueur",G2700810:"Lincoln",G2700830:"Lyon",G2700870:"Mahnomen",G2700890:"Marshall",G2700910:"Martin",G2700850:"McLeod",G2700930:"Meeker",G2700950:"Mille Lacs",G2700970:"Morrison",G2700990:"Mower",G2701010:"Murray",G2701030:"Nicollet",G2701050:"Nobles",G2701070:"Norman",G2701090:"Olmsted",G2701110:"Otter Tail",G2701130:"Pennington",G2701150:"Pine",G2701170:"Pipestone",G2701190:"Polk",G2701210:"Pope",G2701230:"Ramsey",G2701250:"Red Lake",G2701270:"Redwood",G2701290:"Renville",G2701310:"Rice",G2701330:"Rock",G2701350:"Roseau",G2701390:"Scott",G2701410:"Sherburne",G2701430:"Sibley",G2701370:"St. Louis",G2701450:"Stearns",G2701470:"Steele",G2701490:"Stevens",G2701510:"Swift",G2701530:"Todd",G2701550:"Traverse",G2701570:"Wabasha",G2701590:"Wadena",G2701610:"Waseca",G2701630:"Washington",G2701650:"Watonwan",G2701670:"Wilkin",G2701690:"Winona",G2701710:"Wright",G2701730:"Yellow Medicine"},28:{G2800010:"Adams",G2800030:"Alcorn",G2800050:"Amite",G2800070:"Attala",G2800090:"Benton",G2800110:"Bolivar",G2800130:"Calhoun",G2800150:"Carroll",G2800170:"Chickasaw",G2800190:"Choctaw",G2800210:"Claiborne",G2800230:"Clarke",G2800250:"Clay",G2800270:"Coahoma",G2800290:"Copiah",G2800310:"Covington",G2800330:"DeSoto",G2800350:"Forrest",G2800370:"Franklin",G2800390:"George",G2800410:"Greene",G2800430:"Grenada",G2800450:"Hancock",G2800470:"Harrison",G2800490:"Hinds",G2800510:"Holmes",G2800530:"Humphreys",G2800550:"Issaquena",G2800570:"Itawamba",G2800590:"Jackson",G2800610:"Jasper",G2800630:"Jefferson",G2800650:"Jefferson Davis",G2800670:"Jones",G2800690:"Kemper",G2800710:"Lafayette",G2800730:"Lamar",G2800750:"Lauderdale",G2800770:"Lawrence",G2800790:"Leake",G2800810:"Lee",G2800830:"Leflore",G2800850:"Lincoln",G2800870:"Lowndes",G2800890:"Madison",G2800910:"Marion",G2800930:"Marshall",G2800950:"Monroe",G2800970:"Montgomery",G2800990:"Neshoba",G2801010:"Newton",G2801030:"Noxubee",G2801050:"Oktibbeha",G2801070:"Panola",G2801090:"Pearl River",G2801110:"Perry",G2801130:"Pike",G2801150:"Pontotoc",G2801170:"Prentiss",G2801190:"Quitman",G2801210:"Rankin",G2801230:"Scott",G2801250:"Sharkey",G2801270:"Simpson",G2801290:"Smith",G2801310:"Stone",G2801330:"Sunflower",G2801350:"Tallahatchie",G2801370:"Tate",G2801390:"Tippah",G2801410:"Tishomingo",G2801430:"Tunica",G2801450:"Union",G2801470:"Walthall",G2801490:"Warren",G2801510:"Washington",G2801530:"Wayne",G2801550:"Webster",G2801570:"Wilkinson",G2801590:"Winston",G2801610:"Yalobusha",G2801630:"Yazoo"},29:{G2900010:"Adair",G2900030:"Andrew",G2900050:"Atchison",G2900070:"Audrain",G2900090:"Barry",G2900110:"Barton",G2900130:"Bates",G2900150:"Benton",G2900170:"Bollinger",G2900190:"Boone",G2900210:"Buchanan",G2900230:"Butler",G2900250:"Caldwell",G2900270:"Callaway",G2900290:"Camden",G2900310:"Cape Girardeau",G2900330:"Carroll",G2900350:"Carter",G2900370:"Cass",G2900390:"Cedar",G2900410:"Chariton",G2900430:"Christian",G2900450:"Clark",G2900470:"Clay",G2900490:"Clinton",G2900510:"Cole",G2900530:"Cooper",G2900550:"Crawford",G2900570:"Dade",G2900590:"Dallas",G2900610:"Daviess",G2900630:"DeKalb",G2900650:"Dent",G2900670:"Douglas",G2900690:"Dunklin",G2900710:"Franklin",G2900730:"Gasconade",G2900750:"Gentry",G2900770:"Greene",G2900790:"Grundy",G2900810:"Harrison",G2900830:"Henry",G2900850:"Hickory",G2900870:"Holt",G2900890:"Howard",G2900910:"Howell",G2900930:"Iron",G2900950:"Jackson",G2900970:"Jasper",G2900990:"Jefferson",G2901010:"Johnson",G2901030:"Knox",G2901050:"Laclede",G2901070:"Lafayette",G2901090:"Lawrence",G2901110:"Lewis",G2901130:"Lincoln",G2901150:"Linn",G2901170:"Livingston",G2901210:"Macon",G2901230:"Madison",G2901250:"Maries",G2901270:"Marion",G2901190:"McDonald",G2901290:"Mercer",G2901310:"Miller",G2901330:"Mississippi",G2901350:"Moniteau",G2901370:"Monroe",G2901390:"Montgomery",G2901410:"Morgan",G2901430:"New Madrid",G2901450:"Newton",G2901470:"Nodaway",G2901490:"Oregon",G2901510:"Osage",G2901530:"Ozark",G2901550:"Pemiscot",G2901570:"Perry",G2901590:"Pettis",G2901610:"Phelps",G2901630:"Pike",G2901650:"Platte",G2901670:"Polk",G2901690:"Pulaski",G2901710:"Putnam",G2901730:"Ralls",G2901750:"Randolph",G2901770:"Ray",G2901790:"Reynolds",G2901810:"Ripley",G2901950:"Saline",G2901970:"Schuyler",G2901990:"Scotland",G2902010:"Scott",G2902030:"Shannon",G2902050:"Shelby",G2901830:"St. Charles",G2901850:"St. Clair",G2901870:"St. Francois",G2901890:"St. Louis",G2905100:"St. Louis",G2901860:"Ste. Genevieve",G2902070:"Stoddard",G2902090:"Stone",G2902110:"Sullivan",G2902130:"Taney",G2902150:"Texas",G2902170:"Vernon",G2902190:"Warren",G2902210:"Washington",G2902230:"Wayne",G2902250:"Webster",G2902270:"Worth",G2902290:"Wright"},30:{G3000010:"Beaverhead",G3000030:"Big Horn",G3000050:"Blaine",G3000070:"Broadwater",G3000090:"Carbon",G3000110:"Carter",G3000130:"Cascade",G3000150:"Chouteau",G3000170:"Custer",G3000190:"Daniels",G3000210:"Dawson",G3000230:"Deer Lodge",G3000250:"Fallon",G3000270:"Fergus",G3000290:"Flathead",G3000310:"Gallatin",G3000330:"Garfield",G3000350:"Glacier",G3000370:"Golden Valley",G3000390:"Granite",G3000410:"Hill",G3000430:"Jefferson",G3000450:"Judith Basin",G3000470:"Lake",G3000490:"Lewis and Clark",G3000510:"Liberty",G3000530:"Lincoln",G3000570:"Madison",G3000550:"McCone",G3000590:"Meagher",G3000610:"Mineral",G3000630:"Missoula",G3000650:"Musselshell",G3000670:"Park",G3000690:"Petroleum",G3000710:"Phillips",G3000730:"Pondera",G3000750:"Powder River",G3000770:"Powell",G3000790:"Prairie",G3000810:"Ravalli",G3000830:"Richland",G3000850:"Roosevelt",G3000870:"Rosebud",G3000890:"Sanders",G3000910:"Sheridan",G3000930:"Silver Bow",G3000950:"Stillwater",G3000970:"Sweet Grass",G3000990:"Teton",G3001010:"Toole",G3001030:"Treasure",G3001050:"Valley",G3001070:"Wheatland",G3001090:"Wibaux",G3001110:"Yellowstone"},31:{G3100010:"Adams",G3100030:"Antelope",G3100050:"Arthur",G3100070:"Banner",G3100090:"Blaine",G3100110:"Boone",G3100130:"Box Butte",G3100150:"Boyd",G3100170:"Brown",G3100190:"Buffalo",G3100210:"Burt",G3100230:"Butler",G3100250:"Cass",G3100270:"Cedar",G3100290:"Chase",G3100310:"Cherry",G3100330:"Cheyenne",G3100350:"Clay",G3100370:"Colfax",G3100390:"Cuming",G3100410:"Custer",G3100430:"Dakota",G3100450:"Dawes",G3100470:"Dawson",G3100490:"Deuel",G3100510:"Dixon",G3100530:"Dodge",G3100550:"Douglas",G3100570:"Dundy",G3100590:"Fillmore",G3100610:"Franklin",G3100630:"Frontier",G3100650:"Furnas",G3100670:"Gage",G3100690:"Garden",G3100710:"Garfield",G3100730:"Gosper",G3100750:"Grant",G3100770:"Greeley",G3100790:"Hall",G3100810:"Hamilton",G3100830:"Harlan",G3100850:"Hayes",G3100870:"Hitchcock",G3100890:"Holt",G3100910:"Hooker",G3100930:"Howard",G3100950:"Jefferson",G3100970:"Johnson",G3100990:"Kearney",G3101010:"Keith",G3101030:"Keya Paha",G3101050:"Kimball",G3101070:"Knox",G3101090:"Lancaster",G3101110:"Lincoln",G3101130:"Logan",G3101150:"Loup",G3101190:"Madison",G3101170:"McPherson",G3101210:"Merrick",G3101230:"Morrill",G3101250:"Nance",G3101270:"Nemaha",G3101290:"Nuckolls",G3101310:"Otoe",G3101330:"Pawnee",G3101350:"Perkins",G3101370:"Phelps",G3101390:"Pierce",G3101410:"Platte",G3101430:"Polk",G3101450:"Red Willow",G3101470:"Richardson",G3101490:"Rock",G3101510:"Saline",G3101530:"Sarpy",G3101550:"Saunders",G3101570:"Scotts Bluff",G3101590:"Seward",G3101610:"Sheridan",G3101630:"Sherman",G3101650:"Sioux",G3101670:"Stanton",G3101690:"Thayer",G3101710:"Thomas",G3101730:"Thurston",G3101750:"Valley",G3101770:"Washington",G3101790:"Wayne",G3101810:"Webster",G3101830:"Wheeler",G3101850:"York"},32:{G3205100:"Carson City",G3200010:"Churchill",G3200030:"Clark",G3200050:"Douglas",G3200070:"Elko",G3200090:"Esmeralda",G3200110:"Eureka",G3200130:"Humboldt",G3200150:"Lander",G3200170:"Lincoln",G3200190:"Lyon",G3200210:"Mineral",G3200230:"Nye",G3200270:"Pershing",G3200290:"Storey",G3200310:"Washoe",G3200330:"White Pine"},33:{G3300010:"Belknap",G3300030:"Carroll",G3300050:"Cheshire",G3300070:"Coos",G3300090:"Grafton",G3300110:"Hillsborough",G3300130:"Merrimack",G3300150:"Rockingham",G3300170:"Strafford",G3300190:"Sullivan"},34:{G3400010:"Atlantic",G3400030:"Bergen",G3400050:"Burlington",G3400070:"Camden",G3400090:"Cape May",G3400110:"Cumberland",G3400130:"Essex",G3400150:"Gloucester",G3400170:"Hudson",G3400190:"Hunterdon",G3400210:"Mercer",G3400230:"Middlesex",G3400250:"Monmouth",G3400270:"Morris",G3400290:"Ocean",G3400310:"Passaic",G3400330:"Salem",G3400350:"Somerset",G3400370:"Sussex",G3400390:"Union",G3400410:"Warren"},35:{G3500010:"Bernalillo",G3500030:"Catron",G3500050:"Chaves",G3500060:"Cibola",G3500070:"Colfax",G3500090:"Curry",G3500110:"De Baca",G3500130:"Doña Ana",G3500150:"Eddy",G3500170:"Grant",G3500190:"Guadalupe",G3500210:"Harding",G3500230:"Hidalgo",G3500250:"Lea",G3500270:"Lincoln",G3500280:"Los Alamos",G3500290:"Luna",G3500310:"McKinley",G3500330:"Mora",G3500350:"Otero",G3500370:"Quay",G3500390:"Rio Arriba",G3500410:"Roosevelt",G3500450:"San Juan",G3500470:"San Miguel",G3500430:"Sandoval",G3500490:"Santa Fe",G3500510:"Sierra",G3500530:"Socorro",G3500550:"Taos",G3500570:"Torrance",G3500590:"Union",G3500610:"Valencia"},36:{G3600010:"Albany",G3600030:"Allegany",G3600050:"Bronx",G3600070:"Broome",G3600090:"Cattaraugus",G3600110:"Cayuga",G3600130:"Chautauqua",G3600150:"Chemung",G3600170:"Chenango",G3600190:"Clinton",G3600210:"Columbia",G3600230:"Cortland",G3600250:"Delaware",G3600270:"Dutchess",G3600290:"Erie",G3600310:"Essex",G3600330:"Franklin",G3600350:"Fulton",G3600370:"Genesee",G3600390:"Greene",G3600410:"Hamilton",G3600430:"Herkimer",G3600450:"Jefferson",G3600470:"Kings",G3600490:"Lewis",G3600510:"Livingston",G3600530:"Madison",G3600550:"Monroe",G3600570:"Montgomery",G3600590:"Nassau",G3600610:"New York",G3600630:"Niagara",G3600650:"Oneida",G3600670:"Onondaga",G3600690:"Ontario",G3600710:"Orange",G3600730:"Orleans",G3600750:"Oswego",G3600770:"Otsego",G3600790:"Putnam",G3600810:"Queens",G3600830:"Rensselaer",G3600850:"Richmond",G3600870:"Rockland",G3600910:"Saratoga",G3600930:"Schenectady",G3600950:"Schoharie",G3600970:"Schuyler",G3600990:"Seneca",G3600890:"St. Lawrence",G3601010:"Steuben",G3601030:"Suffolk",G3601050:"Sullivan",G3601070:"Tioga",G3601090:"Tompkins",G3601110:"Ulster",G3601130:"Warren",G3601150:"Washington",G3601170:"Wayne",G3601190:"Westchester",G3601210:"Wyoming",G3601230:"Yates"},37:{G3700010:"Alamance",G3700030:"Alexander",G3700050:"Alleghany",G3700070:"Anson",G3700090:"Ashe",G3700110:"Avery",G3700130:"Beaufort",G3700150:"Bertie",G3700170:"Bladen",G3700190:"Brunswick",G3700210:"Buncombe",G3700230:"Burke",G3700250:"Cabarrus",G3700270:"Caldwell",G3700290:"Camden",G3700310:"Carteret",G3700330:"Caswell",G3700350:"Catawba",G3700370:"Chatham",G3700390:"Cherokee",G3700410:"Chowan",G3700430:"Clay",G3700450:"Cleveland",G3700470:"Columbus",G3700490:"Craven",G3700510:"Cumberland",G3700530:"Currituck",G3700550:"Dare",G3700570:"Davidson",G3700590:"Davie",G3700610:"Duplin",G3700630:"Durham",G3700650:"Edgecombe",G3700670:"Forsyth",G3700690:"Franklin",G3700710:"Gaston",G3700730:"Gates",G3700750:"Graham",G3700770:"Granville",G3700790:"Greene",G3700810:"Guilford",G3700830:"Halifax",G3700850:"Harnett",G3700870:"Haywood",G3700890:"Henderson",G3700910:"Hertford",G3700930:"Hoke",G3700950:"Hyde",G3700970:"Iredell",G3700990:"Jackson",G3701010:"Johnston",G3701030:"Jones",G3701050:"Lee",G3701070:"Lenoir",G3701090:"Lincoln",G3701130:"Macon",G3701150:"Madison",G3701170:"Martin",G3701110:"McDowell",G3701190:"Mecklenburg",G3701210:"Mitchell",G3701230:"Montgomery",G3701250:"Moore",G3701270:"Nash",G3701290:"New Hanover",G3701310:"Northampton",G3701330:"Onslow",G3701350:"Orange",G3701370:"Pamlico",G3701390:"Pasquotank",G3701410:"Pender",G3701430:"Perquimans",G3701450:"Person",G3701470:"Pitt",G3701490:"Polk",G3701510:"Randolph",G3701530:"Richmond",G3701550:"Robeson",G3701570:"Rockingham",G3701590:"Rowan",G3701610:"Rutherford",G3701630:"Sampson",G3701650:"Scotland",G3701670:"Stanly",G3701690:"Stokes",G3701710:"Surry",G3701730:"Swain",G3701750:"Transylvania",G3701770:"Tyrrell",G3701790:"Union",G3701810:"Vance",G3701830:"Wake",G3701850:"Warren",G3701870:"Washington",G3701890:"Watauga",G3701910:"Wayne",G3701930:"Wilkes",G3701950:"Wilson",G3701970:"Yadkin",G3701990:"Yancey"},38:{G3800010:"Adams",G3800030:"Barnes",G3800050:"Benson",G3800070:"Billings",G3800090:"Bottineau",G3800110:"Bowman",G3800130:"Burke",G3800150:"Burleigh",G3800170:"Cass",G3800190:"Cavalier",G3800210:"Dickey",G3800230:"Divide",G3800250:"Dunn",G3800270:"Eddy",G3800290:"Emmons",G3800310:"Foster",G3800330:"Golden Valley",G3800350:"Grand Forks",G3800370:"Grant",G3800390:"Griggs",G3800410:"Hettinger",G3800430:"Kidder",G3800450:"LaMoure",G3800470:"Logan",G3800490:"McHenry",G3800510:"McIntosh",G3800530:"McKenzie",G3800550:"McLean",G3800570:"Mercer",G3800590:"Morton",G3800610:"Mountrail",G3800630:"Nelson",G3800650:"Oliver",G3800670:"Pembina",G3800690:"Pierce",G3800710:"Ramsey",G3800730:"Ransom",G3800750:"Renville",G3800770:"Richland",G3800790:"Rolette",G3800810:"Sargent",G3800830:"Sheridan",G3800850:"Sioux",G3800870:"Slope",G3800890:"Stark",G3800910:"Steele",G3800930:"Stutsman",G3800950:"Towner",G3800970:"Traill",G3800990:"Walsh",G3801010:"Ward",G3801030:"Wells",G3801050:"Williams"},39:{G3900010:"Adams",G3900030:"Allen",G3900050:"Ashland",G3900070:"Ashtabula",G3900090:"Athens",G3900110:"Auglaize",G3900130:"Belmont",G3900150:"Brown",G3900170:"Butler",G3900190:"Carroll",G3900210:"Champaign",G3900230:"Clark",G3900250:"Clermont",G3900270:"Clinton",G3900290:"Columbiana",G3900310:"Coshocton",G3900330:"Crawford",G3900350:"Cuyahoga",G3900370:"Darke",G3900390:"Defiance",G3900410:"Delaware",G3900430:"Erie",G3900450:"Fairfield",G3900470:"Fayette",G3900490:"Franklin",G3900510:"Fulton",G3900530:"Gallia",G3900550:"Geauga",G3900570:"Greene",G3900590:"Guernsey",G3900610:"Hamilton",G3900630:"Hancock",G3900650:"Hardin",G3900670:"Harrison",G3900690:"Henry",G3900710:"Highland",G3900730:"Hocking",G3900750:"Holmes",G3900770:"Huron",G3900790:"Jackson",G3900810:"Jefferson",G3900830:"Knox",G3900850:"Lake",G3900870:"Lawrence",G3900890:"Licking",G3900910:"Logan",G3900930:"Lorain",G3900950:"Lucas",G3900970:"Madison",G3900990:"Mahoning",G3901010:"Marion",G3901030:"Medina",G3901050:"Meigs",G3901070:"Mercer",G3901090:"Miami",G3901110:"Monroe",G3901130:"Montgomery",G3901150:"Morgan",G3901170:"Morrow",G3901190:"Muskingum",G3901210:"Noble",G3901230:"Ottawa",G3901250:"Paulding",G3901270:"Perry",G3901290:"Pickaway",G3901310:"Pike",G3901330:"Portage",G3901350:"Preble",G3901370:"Putnam",G3901390:"Richland",G3901410:"Ross",G3901430:"Sandusky",G3901450:"Scioto",G3901470:"Seneca",G3901490:"Shelby",G3901510:"Stark",G3901530:"Summit",G3901550:"Trumbull",G3901570:"Tuscarawas",G3901590:"Union",G3901610:"Van Wert",G3901630:"Vinton",G3901650:"Warren",G3901670:"Washington",G3901690:"Wayne",G3901710:"Williams",G3901730:"Wood",G3901750:"Wyandot"},40:{G4000010:"Adair",G4000030:"Alfalfa",G4000050:"Atoka",G4000070:"Beaver",G4000090:"Beckham",G4000110:"Blaine",G4000130:"Bryan",G4000150:"Caddo",G4000170:"Canadian",G4000190:"Carter",G4000210:"Cherokee",G4000230:"Choctaw",G4000250:"Cimarron",G4000270:"Cleveland",G4000290:"Coal",G4000310:"Comanche",G4000330:"Cotton",G4000350:"Craig",G4000370:"Creek",G4000390:"Custer",G4000410:"Delaware",G4000430:"Dewey",G4000450:"Ellis",G4000470:"Garfield",G4000490:"Garvin",G4000510:"Grady",G4000530:"Grant",G4000550:"Greer",G4000570:"Harmon",G4000590:"Harper",G4000610:"Haskell",G4000630:"Hughes",G4000650:"Jackson",G4000670:"Jefferson",G4000690:"Johnston",G4000710:"Kay",G4000730:"Kingfisher",G4000750:"Kiowa",G4000770:"Latimer",G4000790:"Le Flore",G4000810:"Lincoln",G4000830:"Logan",G4000850:"Love",G4000930:"Major",G4000950:"Marshall",G4000970:"Mayes",G4000870:"McClain",G4000890:"McCurtain",G4000910:"McIntosh",G4000990:"Murray",G4001010:"Muskogee",G4001030:"Noble",G4001050:"Nowata",G4001070:"Okfuskee",G4001090:"Oklahoma",G4001110:"Okmulgee",G4001130:"Osage",G4001150:"Ottawa",G4001170:"Pawnee",G4001190:"Payne",G4001210:"Pittsburg",G4001230:"Pontotoc",G4001250:"Pottawatomie",G4001270:"Pushmataha",G4001290:"Roger Mills",G4001310:"Rogers",G4001330:"Seminole",G4001350:"Sequoyah",G4001370:"Stephens",G4001390:"Texas",G4001410:"Tillman",G4001430:"Tulsa",G4001450:"Wagoner",G4001470:"Washington",G4001490:"Washita",G4001510:"Woods",G4001530:"Woodward"},41:{G4100010:"Baker",G4100030:"Benton",G4100050:"Clackamas",G4100070:"Clatsop",G4100090:"Columbia",G4100110:"Coos",G4100130:"Crook",G4100150:"Curry",G4100170:"Deschutes",G4100190:"Douglas",G4100210:"Gilliam",G4100230:"Grant",G4100250:"Harney",G4100270:"Hood River",G4100290:"Jackson",G4100310:"Jefferson",G4100330:"Josephine",G4100350:"Klamath",G4100370:"Lake",G4100390:"Lane",G4100410:"Lincoln",G4100430:"Linn",G4100450:"Malheur",G4100470:"Marion",G4100490:"Morrow",G4100510:"Multnomah",G4100530:"Polk",G4100550:"Sherman",G4100570:"Tillamook",G4100590:"Umatilla",G4100610:"Union",G4100630:"Wallowa",G4100650:"Wasco",G4100670:"Washington",G4100690:"Wheeler",G4100710:"Yamhill"},42:{G4200010:"Adams",G4200030:"Allegheny",G4200050:"Armstrong",G4200070:"Beaver",G4200090:"Bedford",G4200110:"Berks",G4200130:"Blair",G4200150:"Bradford",G4200170:"Bucks",G4200190:"Butler",G4200210:"Cambria",G4200230:"Cameron",G4200250:"Carbon",G4200270:"Centre",G4200290:"Chester",G4200310:"Clarion",G4200330:"Clearfield",G4200350:"Clinton",G4200370:"Columbia",G4200390:"Crawford",G4200410:"Cumberland",G4200430:"Dauphin",G4200450:"Delaware",G4200470:"Elk",G4200490:"Erie",G4200510:"Fayette",G4200530:"Forest",G4200550:"Franklin",G4200570:"Fulton",G4200590:"Greene",G4200610:"Huntingdon",G4200630:"Indiana",G4200650:"Jefferson",G4200670:"Juniata",G4200690:"Lackawanna",G4200710:"Lancaster",G4200730:"Lawrence",G4200750:"Lebanon",G4200770:"Lehigh",G4200790:"Luzerne",G4200810:"Lycoming",G4200830:"McKean",G4200850:"Mercer",G4200870:"Mifflin",G4200890:"Monroe",G4200910:"Montgomery",G4200930:"Montour",G4200950:"Northampton",G4200970:"Northumberland",G4200990:"Perry",G4201010:"Philadelphia",G4201030:"Pike",G4201050:"Potter",G4201070:"Schuylkill",G4201090:"Snyder",G4201110:"Somerset",G4201130:"Sullivan",G4201150:"Susquehanna",G4201170:"Tioga",G4201190:"Union",G4201210:"Venango",G4201230:"Warren",G4201250:"Washington",G4201270:"Wayne",G4201290:"Westmoreland",G4201310:"Wyoming",G4201330:"York"},44:{G4400010:"Bristol",G4400030:"Kent",G4400050:"Newport",G4400070:"Providence",G4400090:"Washington"},45:{G4500010:"Abbeville",G4500030:"Aiken",G4500050:"Allendale",G4500070:"Anderson",G4500090:"Bamberg",G4500110:"Barnwell",G4500130:"Beaufort",G4500150:"Berkeley",G4500170:"Calhoun",G4500190:"Charleston",G4500210:"Cherokee",G4500230:"Chester",G4500250:"Chesterfield",G4500270:"Clarendon",G4500290:"Colleton",G4500310:"Darlington",G4500330:"Dillon",G4500350:"Dorchester",G4500370:"Edgefield",G4500390:"Fairfield",G4500410:"Florence",G4500430:"Georgetown",G4500450:"Greenville",G4500470:"Greenwood",G4500490:"Hampton",G4500510:"Horry",G4500530:"Jasper",G4500550:"Kershaw",G4500570:"Lancaster",G4500590:"Laurens",G4500610:"Lee",G4500630:"Lexington",G4500670:"Marion",G4500690:"Marlboro",G4500650:"McCormick",G4500710:"Newberry",G4500730:"Oconee",G4500750:"Orangeburg",G4500770:"Pickens",G4500790:"Richland",G4500810:"Saluda",G4500830:"Spartanburg",G4500850:"Sumter",G4500870:"Union",G4500890:"Williamsburg",G4500910:"York"},46:{G4600030:"Aurora",G4600050:"Beadle",G4600070:"Bennett",G4600090:"Bon Homme",G4600110:"Brookings",G4600130:"Brown",G4600150:"Brule",G4600170:"Buffalo",G4600190:"Butte",G4600210:"Campbell",G4600230:"Charles Mix",G4600250:"Clark",G4600270:"Clay",G4600290:"Codington",G4600310:"Corson",G4600330:"Custer",G4600350:"Davison",G4600370:"Day",G4600390:"Deuel",G4600410:"Dewey",G4600430:"Douglas",G4600450:"Edmunds",G4600470:"Fall River",G4600490:"Faulk",G4600510:"Grant",G4600530:"Gregory",G4600550:"Haakon",G4600570:"Hamlin",G4600590:"Hand",G4600610:"Hanson",G4600630:"Harding",G4600650:"Hughes",G4600670:"Hutchinson",G4600690:"Hyde",G4600710:"Jackson",G4600730:"Jerauld",G4600750:"Jones",G4600770:"Kingsbury",G4600790:"Lake",G4600810:"Lawrence",G4600830:"Lincoln",G4600850:"Lyman",G4600910:"Marshall",G4600870:"McCook",G4600890:"McPherson",G4600930:"Meade",G4600950:"Mellette",G4600970:"Miner",G4600990:"Minnehaha",G4601010:"Moody",G4601020:"Oglala Lakota",G4601030:"Pennington",G4601050:"Perkins",G4601070:"Potter",G4601090:"Roberts",G4601110:"Sanborn",G4601150:"Spink",G4601170:"Stanley",G4601190:"Sully",G4601210:"Todd",G4601230:"Tripp",G4601250:"Turner",G4601270:"Union",G4601290:"Walworth",G4601350:"Yankton",G4601370:"Ziebach"},47:{G4700010:"Anderson",G4700030:"Bedford",G4700050:"Benton",G4700070:"Bledsoe",G4700090:"Blount",G4700110:"Bradley",G4700130:"Campbell",G4700150:"Cannon",G4700170:"Carroll",G4700190:"Carter",G4700210:"Cheatham",G4700230:"Chester",G4700250:"Claiborne",G4700270:"Clay",G4700290:"Cocke",G4700310:"Coffee",G4700330:"Crockett",G4700350:"Cumberland",G4700370:"Davidson",G4700410:"DeKalb",G4700390:"Decatur",G4700430:"Dickson",G4700450:"Dyer",G4700470:"Fayette",G4700490:"Fentress",G4700510:"Franklin",G4700530:"Gibson",G4700550:"Giles",G4700570:"Grainger",G4700590:"Greene",G4700610:"Grundy",G4700630:"Hamblen",G4700650:"Hamilton",G4700670:"Hancock",G4700690:"Hardeman",G4700710:"Hardin",G4700730:"Hawkins",G4700750:"Haywood",G4700770:"Henderson",G4700790:"Henry",G4700810:"Hickman",G4700830:"Houston",G4700850:"Humphreys",G4700870:"Jackson",G4700890:"Jefferson",G4700910:"Johnson",G4700930:"Knox",G4700950:"Lake",G4700970:"Lauderdale",G4700990:"Lawrence",G4701010:"Lewis",G4701030:"Lincoln",G4701050:"Loudon",G4701110:"Macon",G4701130:"Madison",G4701150:"Marion",G4701170:"Marshall",G4701190:"Maury",G4701070:"McMinn",G4701090:"McNairy",G4701210:"Meigs",G4701230:"Monroe",G4701250:"Montgomery",G4701270:"Moore",G4701290:"Morgan",G4701310:"Obion",G4701330:"Overton",G4701350:"Perry",G4701370:"Pickett",G4701390:"Polk",G4701410:"Putnam",G4701430:"Rhea",G4701450:"Roane",G4701470:"Robertson",G4701490:"Rutherford",G4701510:"Scott",G4701530:"Sequatchie",G4701550:"Sevier",G4701570:"Shelby",G4701590:"Smith",G4701610:"Stewart",G4701630:"Sullivan",G4701650:"Sumner",G4701670:"Tipton",G4701690:"Trousdale",G4701710:"Unicoi",G4701730:"Union",G4701750:"Van Buren",G4701770:"Warren",G4701790:"Washington",G4701810:"Wayne",G4701830:"Weakley",G4701850:"White",G4701870:"Williamson",G4701890:"Wilson"},48:{G4800010:"Anderson",G4800030:"Andrews",G4800050:"Angelina",G4800070:"Aransas",G4800090:"Archer",G4800110:"Armstrong",G4800130:"Atascosa",G4800150:"Austin",G4800170:"Bailey",G4800190:"Bandera",G4800210:"Bastrop",G4800230:"Baylor",G4800250:"Bee",G4800270:"Bell",G4800290:"Bexar",G4800310:"Blanco",G4800330:"Borden",G4800350:"Bosque",G4800370:"Bowie",G4800390:"Brazoria",G4800410:"Brazos",G4800430:"Brewster",G4800450:"Briscoe",G4800470:"Brooks",G4800490:"Brown",G4800510:"Burleson",G4800530:"Burnet",G4800550:"Caldwell",G4800570:"Calhoun",G4800590:"Callahan",G4800610:"Cameron",G4800630:"Camp",G4800650:"Carson",G4800670:"Cass",G4800690:"Castro",G4800710:"Chambers",G4800730:"Cherokee",G4800750:"Childress",G4800770:"Clay",G4800790:"Cochran",G4800810:"Coke",G4800830:"Coleman",G4800850:"Collin",G4800870:"Collingsworth",G4800890:"Colorado",G4800910:"Comal",G4800930:"Comanche",G4800950:"Concho",G4800970:"Cooke",G4800990:"Coryell",G4801010:"Cottle",G4801030:"Crane",G4801050:"Crockett",G4801070:"Crosby",G4801090:"Culberson",G4801110:"Dallam",G4801130:"Dallas",G4801150:"Dawson",G4801230:"DeWitt",G4801170:"Deaf Smith",G4801190:"Delta",G4801210:"Denton",G4801250:"Dickens",G4801270:"Dimmit",G4801290:"Donley",G4801310:"Duval",G4801330:"Eastland",G4801350:"Ector",G4801370:"Edwards",G4801410:"El Paso",G4801390:"Ellis",G4801430:"Erath",G4801450:"Falls",G4801470:"Fannin",G4801490:"Fayette",G4801510:"Fisher",G4801530:"Floyd",G4801550:"Foard",G4801570:"Fort Bend",G4801590:"Franklin",G4801610:"Freestone",G4801630:"Frio",G4801650:"Gaines",G4801670:"Galveston",G4801690:"Garza",G4801710:"Gillespie",G4801730:"Glasscock",G4801750:"Goliad",G4801770:"Gonzales",G4801790:"Gray",G4801810:"Grayson",G4801830:"Gregg",G4801850:"Grimes",G4801870:"Guadalupe",G4801890:"Hale",G4801910:"Hall",G4801930:"Hamilton",G4801950:"Hansford",G4801970:"Hardeman",G4801990:"Hardin",G4802010:"Harris",G4802030:"Harrison",G4802050:"Hartley",G4802070:"Haskell",G4802090:"Hays",G4802110:"Hemphill",G4802130:"Henderson",G4802150:"Hidalgo",G4802170:"Hill",G4802190:"Hockley",G4802210:"Hood",G4802230:"Hopkins",G4802250:"Houston",G4802270:"Howard",G4802290:"Hudspeth",G4802310:"Hunt",G4802330:"Hutchinson",G4802350:"Irion",G4802370:"Jack",G4802390:"Jackson",G4802410:"Jasper",G4802430:"Jeff Davis",G4802450:"Jefferson",G4802470:"Jim Hogg",G4802490:"Jim Wells",G4802510:"Johnson",G4802530:"Jones",G4802550:"Karnes",G4802570:"Kaufman",G4802590:"Kendall",G4802610:"Kenedy",G4802630:"Kent",G4802650:"Kerr",G4802670:"Kimble",G4802690:"King",G4802710:"Kinney",G4802730:"Kleberg",G4802750:"Knox",G4802830:"La Salle",G4802770:"Lamar",G4802790:"Lamb",G4802810:"Lampasas",G4802850:"Lavaca",G4802870:"Lee",G4802890:"Leon",G4802910:"Liberty",G4802930:"Limestone",G4802950:"Lipscomb",G4802970:"Live Oak",G4802990:"Llano",G4803010:"Loving",G4803030:"Lubbock",G4803050:"Lynn",G4803130:"Madison",G4803150:"Marion",G4803170:"Martin",G4803190:"Mason",G4803210:"Matagorda",G4803230:"Maverick",G4803070:"McCulloch",G4803090:"McLennan",G4803110:"McMullen",G4803250:"Medina",G4803270:"Menard",G4803290:"Midland",G4803310:"Milam",G4803330:"Mills",G4803350:"Mitchell",G4803370:"Montague",G4803390:"Montgomery",G4803410:"Moore",G4803430:"Morris",G4803450:"Motley",G4803470:"Nacogdoches",G4803490:"Navarro",G4803510:"Newton",G4803530:"Nolan",G4803550:"Nueces",G4803570:"Ochiltree",G4803590:"Oldham",G4803610:"Orange",G4803630:"Palo Pinto",G4803650:"Panola",G4803670:"Parker",G4803690:"Parmer",G4803710:"Pecos",G4803730:"Polk",G4803750:"Potter",G4803770:"Presidio",G4803790:"Rains",G4803810:"Randall",G4803830:"Reagan",G4803850:"Real",G4803870:"Red River",G4803890:"Reeves",G4803910:"Refugio",G4803930:"Roberts",G4803950:"Robertson",G4803970:"Rockwall",G4803990:"Runnels",G4804010:"Rusk",G4804030:"Sabine",G4804050:"San Augustine",G4804070:"San Jacinto",G4804090:"San Patricio",G4804110:"San Saba",G4804130:"Schleicher",G4804150:"Scurry",G4804170:"Shackelford",G4804190:"Shelby",G4804210:"Sherman",G4804230:"Smith",G4804250:"Somervell",G4804270:"Starr",G4804290:"Stephens",G4804310:"Sterling",G4804330:"Stonewall",G4804350:"Sutton",G4804370:"Swisher",G4804390:"Tarrant",G4804410:"Taylor",G4804430:"Terrell",G4804450:"Terry",G4804470:"Throckmorton",G4804490:"Titus",G4804510:"Tom Green",G4804530:"Travis",G4804550:"Trinity",G4804570:"Tyler",G4804590:"Upshur",G4804610:"Upton",G4804630:"Uvalde",G4804650:"Val Verde",G4804670:"Van Zandt",G4804690:"Victoria",G4804710:"Walker",G4804730:"Waller",G4804750:"Ward",G4804770:"Washington",G4804790:"Webb",G4804810:"Wharton",G4804830:"Wheeler",G4804850:"Wichita",G4804870:"Wilbarger",G4804890:"Willacy",G4804910:"Williamson",G4804930:"Wilson",G4804950:"Winkler",G4804970:"Wise",G4804990:"Wood",G4805010:"Yoakum",G4805030:"Young",G4805050:"Zapata",G4805070:"Zavala"},49:{G4900010:"Beaver",G4900030:"Box Elder",G4900050:"Cache",G4900070:"Carbon",G4900090:"Daggett",G4900110:"Davis",G4900130:"Duchesne",G4900150:"Emery",G4900170:"Garfield",G4900190:"Grand",G4900210:"Iron",G4900230:"Juab",G4900250:"Kane",G4900270:"Millard",G4900290:"Morgan",G4900310:"Piute",G4900330:"Rich",G4900350:"Salt Lake",G4900370:"San Juan",G4900390:"Sanpete",G4900410:"Sevier",G4900430:"Summit",G4900450:"Tooele",G4900470:"Uintah",G4900490:"Utah",G4900510:"Wasatch",G4900530:"Washington",G4900550:"Wayne",G4900570:"Weber"},50:{G5000010:"Addison",G5000030:"Bennington",G5000050:"Caledonia",G5000070:"Chittenden",G5000090:"Essex",G5000110:"Franklin",G5000130:"Grand Isle",G5000150:"Lamoille",G5000170:"Orange",G5000190:"Orleans",G5000210:"Rutland",G5000230:"Washington",G5000250:"Windham",G5000270:"Windsor"},51:{G5100010:"Accomack",G5100030:"Albemarle",G5105100:"Alexandria",G5100050:"Alleghany",G5100070:"Amelia",G5100090:"Amherst",G5100110:"Appomattox",G5100130:"Arlington",G5100150:"Augusta",G5100170:"Bath",G5100190:"Bedford",G5100210:"Bland",G5100230:"Botetourt",G5105200:"Bristol",G5100250:"Brunswick",G5100270:"Buchanan",G5100290:"Buckingham",G5105300:"Buena Vista",G5100310:"Campbell",G5100330:"Caroline",G5100350:"Carroll",G5100360:"Charles City",G5100370:"Charlotte",G5105400:"Charlottesville",G5105500:"Chesapeake",G5100410:"Chesterfield",G5100430:"Clarke",G5105700:"Colonial Heights",G5105800:"Covington",G5100450:"Craig",G5100470:"Culpeper",G5100490:"Cumberland",G5105900:"Danville",G5100510:"Dickenson",G5100530:"Dinwiddie",G5105950:"Emporia",G5100570:"Essex",G5106000:"Fairfax",G5100590:"Fairfax",G5106100:"Falls Church",G5100610:"Fauquier",G5100630:"Floyd",G5100650:"Fluvanna",G5106200:"Franklin",G5100670:"Franklin",G5100690:"Frederick",G5106300:"Fredericksburg",G5106400:"Galax",G5100710:"Giles",G5100730:"Gloucester",G5100750:"Goochland",G5100770:"Grayson",G5100790:"Greene",G5100810:"Greensville",G5100830:"Halifax",G5106500:"Hampton",G5100850:"Hanover",G5106600:"Harrisonburg",G5100870:"Henrico",G5100890:"Henry",G5100910:"Highland",G5106700:"Hopewell",G5100930:"Isle of Wight",G5100950:"James City",G5100990:"King George",G5101010:"King William",G5100970:"King and Queen",G5101030:"Lancaster",G5101050:"Lee",G5106780:"Lexington",G5101070:"Loudoun",G5101090:"Louisa",G5101110:"Lunenburg",G5106800:"Lynchburg",G5101130:"Madison",G5106830:"Manassas",G5106850:"Manassas Park",G5106900:"Martinsville",G5101150:"Mathews",G5101170:"Mecklenburg",G5101190:"Middlesex",G5101210:"Montgomery",G5101250:"Nelson",G5101270:"New Kent",G5107000:"Newport News",G5107100:"Norfolk",G5101310:"Northampton",G5101330:"Northumberland",G5107200:"Norton",G5101350:"Nottoway",G5101370:"Orange",G5101390:"Page",G5101410:"Patrick",G5107300:"Petersburg",G5101430:"Pittsylvania",G5107350:"Poquoson",G5107400:"Portsmouth",G5101450:"Powhatan",G5101470:"Prince Edward",G5101490:"Prince George",G5101530:"Prince William",G5101550:"Pulaski",G5107500:"Radford",G5101570:"Rappahannock",G5107600:"Richmond",G5101590:"Richmond",G5107700:"Roanoke",G5101610:"Roanoke",G5101630:"Rockbridge",G5101650:"Rockingham",G5101670:"Russell",G5107750:"Salem",G5101690:"Scott",G5101710:"Shenandoah",G5101730:"Smyth",G5101750:"Southampton",G5101770:"Spotsylvania",G5101790:"Stafford",G5107900:"Staunton",G5108000:"Suffolk",G5101810:"Surry",G5101830:"Sussex",G5101850:"Tazewell",G5108100:"Virginia Beach",G5101870:"Warren",G5101910:"Washington",G5108200:"Waynesboro",G5101930:"Westmoreland",G5108300:"Williamsburg",G5108400:"Winchester",G5101950:"Wise",G5101970:"Wythe",G5101990:"York"},53:{G5300010:"Adams",G5300030:"Asotin",G5300050:"Benton",G5300070:"Chelan",G5300090:"Clallam",G5300110:"Clark",G5300130:"Columbia",G5300150:"Cowlitz",G5300170:"Douglas",G5300190:"Ferry",G5300210:"Franklin",G5300230:"Garfield",G5300250:"Grant",G5300270:"Grays Harbor",G5300290:"Island",G5300310:"Jefferson",G5300330:"King",G5300350:"Kitsap",G5300370:"Kittitas",G5300390:"Klickitat",G5300410:"Lewis",G5300430:"Lincoln",G5300450:"Mason",G5300470:"Okanogan",G5300490:"Pacific",G5300510:"Pend Oreille",G5300530:"Pierce",G5300550:"San Juan",G5300570:"Skagit",G5300590:"Skamania",G5300610:"Snohomish",G5300630:"Spokane",G5300650:"Stevens",G5300670:"Thurston",G5300690:"Wahkiakum",G5300710:"Walla Walla",G5300730:"Whatcom",G5300750:"Whitman",G5300770:"Yakima"},54:{G5400010:"Barbour",G5400030:"Berkeley",G5400050:"Boone",G5400070:"Braxton",G5400090:"Brooke",G5400110:"Cabell",G5400130:"Calhoun",G5400150:"Clay",G5400170:"Doddridge",G5400190:"Fayette",G5400210:"Gilmer",G5400230:"Grant",G5400250:"Greenbrier",G5400270:"Hampshire",G5400290:"Hancock",G5400310:"Hardy",G5400330:"Harrison",G5400350:"Jackson",G5400370:"Jefferson",G5400390:"Kanawha",G5400410:"Lewis",G5400430:"Lincoln",G5400450:"Logan",G5400490:"Marion",G5400510:"Marshall",G5400530:"Mason",G5400470:"McDowell",G5400550:"Mercer",G5400570:"Mineral",G5400590:"Mingo",G5400610:"Monongalia",G5400630:"Monroe",G5400650:"Morgan",G5400670:"Nicholas",G5400690:"Ohio",G5400710:"Pendleton",G5400730:"Pleasants",G5400750:"Pocahontas",G5400770:"Preston",G5400790:"Putnam",G5400810:"Raleigh",G5400830:"Randolph",G5400850:"Ritchie",G5400870:"Roane",G5400890:"Summers",G5400910:"Taylor",G5400930:"Tucker",G5400950:"Tyler",G5400970:"Upshur",G5400990:"Wayne",G5401010:"Webster",G5401030:"Wetzel",G5401050:"Wirt",G5401070:"Wood",G5401090:"Wyoming"},55:{G5500010:"Adams",G5500030:"Ashland",G5500050:"Barron",G5500070:"Bayfield",G5500090:"Brown",G5500110:"Buffalo",G5500130:"Burnett",G5500150:"Calumet",G5500170:"Chippewa",G5500190:"Clark",G5500210:"Columbia",G5500230:"Crawford",G5500250:"Dane",G5500270:"Dodge",G5500290:"Door",G5500310:"Douglas",G5500330:"Dunn",G5500350:"Eau Claire",G5500370:"Florence",G5500390:"Fond du Lac",G5500410:"Forest",G5500430:"Grant",G5500450:"Green",G5500470:"Green Lake",G5500490:"Iowa",G5500510:"Iron",G5500530:"Jackson",G5500550:"Jefferson",G5500570:"Juneau",G5500590:"Kenosha",G5500610:"Kewaunee",G5500630:"La Crosse",G5500650:"Lafayette",G5500670:"Langlade",G5500690:"Lincoln",G5500710:"Manitowoc",G5500730:"Marathon",G5500750:"Marinette",G5500770:"Marquette",G5500780:"Menominee",G5500790:"Milwaukee",G5500810:"Monroe",G5500830:"Oconto",G5500850:"Oneida",G5500870:"Outagamie",G5500890:"Ozaukee",G5500910:"Pepin",G5500930:"Pierce",G5500950:"Polk",G5500970:"Portage",G5500990:"Price",G5501010:"Racine",G5501030:"Richland",G5501050:"Rock",G5501070:"Rusk",G5501110:"Sauk",G5501130:"Sawyer",G5501150:"Shawano",G5501170:"Sheboygan",G5501090:"St. Croix",G5501190:"Taylor",G5501210:"Trempealeau",G5501230:"Vernon",G5501250:"Vilas",G5501270:"Walworth",G5501290:"Washburn",G5501310:"Washington",G5501330:"Waukesha",G5501350:"Waupaca",G5501370:"Waushara",G5501390:"Winnebago",G5501410:"Wood"},56:{G5600010:"Albany",G5600030:"Big Horn",G5600050:"Campbell",G5600070:"Carbon",G5600090:"Converse",G5600110:"Crook",G5600130:"Fremont",G5600150:"Goshen",G5600170:"Hot Springs",G5600190:"Johnson",G5600210:"Laramie",G5600230:"Lincoln",G5600250:"Natrona",G5600270:"Niobrara",G5600290:"Park",G5600310:"Platte",G5600330:"Sheridan",G5600350:"Sublette",G5600370:"Sweetwater",G5600390:"Teton",G5600410:"Uinta",G5600430:"Washakie",G5600450:"Weston"},60:{G6000100:"Eastern",G6000200:"Manu'a",G6000300:"Rose Island",G6000400:"Swains Island",G6000500:"Western"},66:{G6600100:"Guam"},69:{G6900850:"Northern Islands",G6901000:"Rota",G6901100:"Saipan",G6901200:"Tinian"},72:{G7200010:"Adjuntas",G7200030:"Aguada",G7200050:"Aguadilla",G7200070:"Aguas Buenas",G7200090:"Aibonito",G7200130:"Arecibo",G7200150:"Arroyo",G7200110:"Añasco",G7200170:"Barceloneta",G7200190:"Barranquitas",G7200210:"Bayamón",G7200230:"Cabo Rojo",G7200250:"Caguas",G7200270:"Camuy",G7200290:"Canóvanas",G7200310:"Carolina",G7200330:"Cataño",G7200350:"Cayey",G7200370:"Ceiba",G7200390:"Ciales",G7200410:"Cidra",G7200430:"Coamo",G7200450:"Comerío",G7200470:"Corozal",G7200490:"Culebra",G7200510:"Dorado",G7200530:"Fajardo",G7200540:"Florida",G7200570:"Guayama",G7200590:"Guayanilla",G7200610:"Guaynabo",G7200630:"Gurabo",G7200550:"Guánica",G7200650:"Hatillo",G7200670:"Hormigueros",G7200690:"Humacao",G7200710:"Isabela",G7200730:"Jayuya",G7200750:"Juana Díaz",G7200770:"Juncos",G7200790:"Lajas",G7200810:"Lares",G7200830:"Las Marías",G7200850:"Las Piedras",G7200870:"Loíza",G7200890:"Luquillo",G7200910:"Manatí",G7200930:"Maricao",G7200950:"Maunabo",G7200970:"Mayagüez",G7200990:"Moca",G7201010:"Morovis",G7201030:"Naguabo",G7201050:"Naranjito",G7201070:"Orocovis",G7201090:"Patillas",G7201110:"Peñuelas",G7201130:"Ponce",G7201150:"Quebradillas",G7201170:"Rincón",G7201190:"Río Grande",G7201210:"Sabana Grande",G7201230:"Salinas",G7201250:"San Germán",G7201270:"San Juan",G7201290:"San Lorenzo",G7201310:"San Sebastián",G7201330:"Santa Isabel",G7201350:"Toa Alta",G7201370:"Toa Baja",G7201390:"Trujillo Alto",G7201410:"Utuado",G7201430:"Vega Alta",G7201450:"Vega Baja",G7201470:"Vieques",G7201490:"Villalba",G7201510:"Yabucoa",G7201530:"Yauco"},78:{G7800100:"St. Croix",G7800200:"St. John",G7800300:"St. Thomas"}},Ir=["Utility - Retail or Bulk","Utility Regulator","City/Local Government","Consultant","State Energy Office","Policy Advocates","DOE/Federal Agency","Industry Tool Provider","Manufacturer/Startup","NREL Internal Tools","Lab/Academia","Business/Investor","Building Portfolio Owner","Media"],R0=e=>({currentTarget:{value:n}})=>e(n),J0=e=>({currentTarget:{selectedOptions:n}})=>e(Array.from(n,({value:t})=>t)),{SNAPPY:br,ZSTD:Sr}=_r,Lr=Object.entries($0).sort(([,e],[,n])=>e.localeCompare(n));function Mr(){const[e,n]=g0(""),[t,a]=g0(""),[r,i]=g0(""),[o,G]=g0(""),[u,l]=g0(""),[d,s]=g0([]),[g,A]=g0([]),[y,C]=g0($e),[k,w]=g0([]),[E,v]=g0(!1),[x,P]=g0(null),B=()=>{const h={};for(const m of g)for(const p of d)if(m in U0[p]){h[p]??(h[p]=[]),h[p].push(m);break}return h},L=()=>E||[e,t,r,o,u].some(h=>!h.trim().length)||[d,g,y,k].some(h=>!h.length),f=async()=>{const h=Object.entries(B()).flatMap(([m,p])=>p.map(b=>`${U0[m][b]} (${b})`));try{await fetch("https://prod-55.usgovtexas.logic.azure.us:443/workflows/8b47d4fb1f41411781ec7836210884f8/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=65ao8WvmFQE5KtK39j2ni_FSANzTt_MUb9JHVQHbwnw",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({"First Name":e,"Last Name":t,Email:r,"Use Case":o,Persona:u,"Selected States":d.map(m=>$0[m]).join(", "),"Selected Counties":h.join(", "),"Selected Datasets":k.join(", "),Timestamp:new Date().toISOString()})})}catch(m){console.error(m)}},c=async()=>{v(!0),await f();const h=B(),m=d.flatMap(S=>{const U=$0[S];return h[S].map(R=>["baseline",...k].map(J=>({county:U0[S][R],url:`https://oedi-data-lake.s3.amazonaws.com/nrel-pds-building-stock/end-use-load-profiles-for-us-building-stock/2024/comstock_amy2018_release_2/metadata_and_annual_results_aggregates/by_state_and_county/full/parquet/state%3D${U}/county%3D${R}/${U}_${R}_${J}_agg.parquet`})))});let p=0;const b=m.flat().length;P([p,b]);const M=[];for(const{county:S,url:U}of m.flat()){let R;try{R=await Ct({url:U})}catch{P([++p,b]);continue}const J=y.includes("in.county_name"),N=await bt({file:R,compressors:{SNAPPY:br,ZSTD:Sr},columns:y.filter($=>$!=="in.county_name")});M.push(...N.map($=>J?{...$,"in.county_name":S}:$)),P([++p,b])}M.length>0&&Br(Er(M,y),"Merged Data.csv"),P(null),v(!1)};return K("div",{class:"flex flex-col items-start gap-3",children:[K("fieldset",{class:"inline-flex gap-3",children:[K("legend",{children:"User Info"}),K("div",{class:"flex flex-col gap-3",children:[K("div",{class:"flex gap-3",children:[K("input",{type:"text",placeholder:"First Name *",autoComplete:"given-name",required:!0,value:e,onInput:R0(n)}),K("input",{type:"text",placeholder:"Last Name *",autoComplete:"family-name",required:!0,value:t,onInput:R0(a)})]}),K("input",{type:"email",placeholder:"Email *",autoComplete:"email",required:!0,value:r,onInput:R0(i)}),K("textarea",{placeholder:"Use Case *",class:"resize-none",required:!0,value:o,onInput:R0(G)}),K("select",{required:!0,value:u,onChange:R0(l),children:[K("option",{value:"",disabled:!0,children:"Select Persona *"}),Ir.map(h=>K("option",{value:h,children:h},h))]})]})]}),K("fieldset",{class:"inline-flex",children:[K("legend",{children:"Data Selection"}),K("div",{class:"flex h-100 gap-3",children:[K("select",{multiple:!0,required:!0,onChange:J0(s),children:[K("option",{disabled:!0,value:"",children:"Select states"}),Lr.map(([h,m])=>K("option",{value:h,selected:d.includes(h),children:m},h))]}),K("select",{multiple:!0,required:!0,class:"min-w-50",onChange:J0(A),children:[K("option",{disabled:!0,value:"",children:"Select counties"}),d.map(h=>K(W0,{children:[K("option",{disabled:!0,class:"mt-3 mb-1 flex h-8 items-center justify-center rounded-md bg-gray-500 font-medium text-white",children:$0[h]}),Object.entries(U0[h]).map(([m,p])=>K("option",{value:m,selected:g.includes(m),children:p},m))]}))]}),K("select",{multiple:!0,required:!0,onChange:J0(C),children:[K("option",{disabled:!0,value:"",children:"Select columns"}),$e.map(h=>K("option",{value:h,selected:y.includes(h),children:h},h))]}),K("select",{multiple:!0,required:!0,onChange:J0(w),children:[K("option",{disabled:!0,value:"",children:"Select upgrades"}),yr.map(h=>K("option",{value:h,selected:k.includes(h),children:h},h))]})]})]}),K("button",{disabled:L(),onClick:c,children:x?`Downloading ${x[0]+1}/${x[1]} ...`:"Download"})]})}On(K(Mr,{}),document.getElementById("parquet-merge"));
